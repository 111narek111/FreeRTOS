
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005254  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005410  08005410  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005410  08005410  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  20000060  08005478  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001468  08005478  00021468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c5c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003118  00000000  00000000  00032d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00035e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9f  00000000  00000000  00037138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193dc  00000000  00000000  00037fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145fe  00000000  00000000  000513b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b1e  00000000  00000000  000659b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000516c  00000000  00000000  000f94d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fe63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800534c 	.word	0x0800534c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800534c 	.word	0x0800534c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000184:	f3bf 8f4f 	dsb	sy
}
 8000188:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800018a:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <__NVIC_SystemReset+0x24>)
 800018c:	68db      	ldr	r3, [r3, #12]
 800018e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000192:	4904      	ldr	r1, [pc, #16]	; (80001a4 <__NVIC_SystemReset+0x24>)
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__NVIC_SystemReset+0x28>)
 8000196:	4313      	orrs	r3, r2
 8000198:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800019a:	f3bf 8f4f 	dsb	sy
}
 800019e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80001a0:	bf00      	nop
 80001a2:	e7fd      	b.n	80001a0 <__NVIC_SystemReset+0x20>
 80001a4:	e000ed00 	.word	0xe000ed00
 80001a8:	05fa0004 	.word	0x05fa0004

080001ac <main>:
void usart_to_spi(void const *argument);
void spi_to_usart(void const *argument);
void enterLowPower(void const *argument);
uint8_t reverse_bits(uint8_t number);

int main(void) {
 80001ac:	b5b0      	push	{r4, r5, r7, lr}
 80001ae:	b096      	sub	sp, #88	; 0x58
 80001b0:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001b2:	f000 fe5d 	bl	8000e70 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80001b6:	f000 f9eb 	bl	8000590 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001ba:	f000 fb59 	bl	8000870 <MX_GPIO_Init>
	MX_DMA_Init();
 80001be:	f000 fb21 	bl	8000804 <MX_DMA_Init>
	MX_USART2_Init();
 80001c2:	f000 faf3 	bl	80007ac <MX_USART2_Init>
	MX_SPI2_Init();
 80001c6:	f000 fa1f 	bl	8000608 <MX_SPI2_Init>
	MX_TIM2_Init();
 80001ca:	f000 fa55 	bl	8000678 <MX_TIM2_Init>
	MX_TIM3_Init();
 80001ce:	f000 fa9f 	bl	8000710 <MX_TIM3_Init>

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(usartTOSpi, usart_to_spi, osPriorityAboveNormal, 0, 128);
 80001d2:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <main+0x9c>)
 80001d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	usartToSpiHandle = osThreadCreate(osThread(usartTOSpi), NULL);
 80001e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f003 fc69 	bl	8003ac4 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a15      	ldr	r2, [pc, #84]	; (800024c <main+0xa0>)
 80001f6:	6013      	str	r3, [r2, #0]
	osThreadDef(spiToUsart, spi_to_usart, osPriorityAboveNormal, 0, 128);
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <main+0xa4>)
 80001fa:	f107 0420 	add.w	r4, r7, #32
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	spiToUsartHandle = osThreadCreate(osThread(spiToUsart), NULL);
 800020c:	f107 0320 	add.w	r3, r7, #32
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fc56 	bl	8003ac4 <osThreadCreate>
 8000218:	4603      	mov	r3, r0
 800021a:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <main+0xa8>)
 800021c:	6013      	str	r3, [r2, #0]
	osThreadDef(lowEnergy, enterLowPower, osPriorityNormal, 0, 128);
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <main+0xac>)
 8000220:	1d3c      	adds	r4, r7, #4
 8000222:	461d      	mov	r5, r3
 8000224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	lowPowerHandle = osThreadCreate(osThread(lowEnergy), NULL);
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f003 fc45 	bl	8003ac4 <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <main+0xb0>)
 800023e:	6013      	str	r3, [r2, #0]

	/* Start scheduler */
	osKernelStart();
 8000240:	f003 fc39 	bl	8003ab6 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
 8000244:	e7fe      	b.n	8000244 <main+0x98>
 8000246:	bf00      	nop
 8000248:	08005370 	.word	0x08005370
 800024c:	20000584 	.word	0x20000584
 8000250:	08005398 	.word	0x08005398
 8000254:	20000588 	.word	0x20000588
 8000258:	080053c0 	.word	0x080053c0
 800025c:	2000058c 	.word	0x2000058c

08000260 <enterLowPower>:
}
/**
 * @brief Task that enters low energy mode
 * @retval None
 */
void enterLowPower(void const *argument) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	for (;;) {
		vTaskSuspendAll();
 8000268:	f003 ffde 	bl	8004228 <vTaskSuspendAll>
		HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI);
 800026c:	2101      	movs	r1, #1
 800026e:	2000      	movs	r0, #0
 8000270:	f001 fa82 	bl	8001778 <HAL_PWR_EnterSLEEPMode>
		vTaskSuspendAll();
 8000274:	e7f8      	b.n	8000268 <enterLowPower+0x8>
	...

08000278 <usart_to_spi>:
}
/**
 * @brief Task that receives USART data and transmit to SPI
 * @retval None
 */
void usart_to_spi(void const *argument) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	uint8_t spi_tx[SPI_DMA_BUFFER_SIZE];
	for (;;) {
		HAL_USART_Receive_DMA(&husart2, usart_rx_buffer, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	4931      	ldr	r1, [pc, #196]	; (8000348 <usart_to_spi+0xd0>)
 8000284:	4831      	ldr	r0, [pc, #196]	; (800034c <usart_to_spi+0xd4>)
 8000286:	f003 f907 	bl	8003498 <HAL_USART_Receive_DMA>
		ulTaskNotifyTake(0, portMAX_DELAY);
 800028a:	f04f 31ff 	mov.w	r1, #4294967295
 800028e:	2000      	movs	r0, #0
 8000290:	f004 fa72 	bl	8004778 <ulTaskNotifyTake>
		taskENTER_CRITICAL();
 8000294:	f004 fcaa 	bl	8004bec <vPortEnterCritical>
		for (int k = 0; k < spi_num_of_bytes; k++) {
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24
 800029c:	e011      	b.n	80002c2 <usart_to_spi+0x4a>
			spi_tx[k] = reverse_bits(usart_rx_buffer[k]);
 800029e:	4a2a      	ldr	r2, [pc, #168]	; (8000348 <usart_to_spi+0xd0>)
 80002a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a2:	4413      	add	r3, r2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fb22 	bl	80008f0 <reverse_bits>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4619      	mov	r1, r3
 80002b0:	f107 020c 	add.w	r2, r7, #12
 80002b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b6:	4413      	add	r3, r2
 80002b8:	460a      	mov	r2, r1
 80002ba:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < spi_num_of_bytes; k++) {
 80002bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002be:	3301      	adds	r3, #1
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
 80002c2:	4b23      	ldr	r3, [pc, #140]	; (8000350 <usart_to_spi+0xd8>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	461a      	mov	r2, r3
 80002c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ca:	4293      	cmp	r3, r2
 80002cc:	dbe7      	blt.n	800029e <usart_to_spi+0x26>
		}
		for (uint8_t j = 1; j < spi_num_of_bytes; j += 2) {
 80002ce:	2301      	movs	r3, #1
 80002d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80002d4:	e022      	b.n	800031c <usart_to_spi+0xa4>
			uint8_t temp = spi_tx[j - 1];
 80002d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002da:	3b01      	subs	r3, #1
 80002dc:	3328      	adds	r3, #40	; 0x28
 80002de:	443b      	add	r3, r7
 80002e0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			spi_tx[j - 1] = spi_tx[j];
 80002e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80002ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002f0:	3b01      	subs	r3, #1
 80002f2:	3228      	adds	r2, #40	; 0x28
 80002f4:	443a      	add	r2, r7
 80002f6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80002fa:	3328      	adds	r3, #40	; 0x28
 80002fc:	443b      	add	r3, r7
 80002fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
			spi_tx[j] = temp;
 8000302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000306:	3328      	adds	r3, #40	; 0x28
 8000308:	443b      	add	r3, r7
 800030a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800030e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint8_t j = 1; j < spi_num_of_bytes; j += 2) {
 8000312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000316:	3302      	adds	r3, #2
 8000318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <usart_to_spi+0xd8>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000324:	429a      	cmp	r2, r3
 8000326:	d3d6      	bcc.n	80002d6 <usart_to_spi+0x5e>
		}
		HAL_SPI_Transmit_DMA(&hspi2, spi_tx, spi_num_of_bytes);
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <usart_to_spi+0xd8>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b29a      	uxth	r2, r3
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	4619      	mov	r1, r3
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <usart_to_spi+0xdc>)
 8000336:	f001 feff 	bl	8002138 <HAL_SPI_Transmit_DMA>
		spi_num_of_bytes = 0;
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <usart_to_spi+0xd8>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8000340:	f004 fc84 	bl	8004c4c <vPortExitCritical>
		HAL_USART_Receive_DMA(&husart2, usart_rx_buffer, 1);
 8000344:	e79c      	b.n	8000280 <usart_to_spi+0x8>
 8000346:	bf00      	nop
 8000348:	2000031c 	.word	0x2000031c
 800034c:	200004b8 	.word	0x200004b8
 8000350:	20000344 	.word	0x20000344
 8000354:	20000348 	.word	0x20000348

08000358 <spi_to_usart>:
}
/**
 * @brief Task that receives SPI data and transmit to USART
 * @retval None
 */
void spi_to_usart(void const *argument) {
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b089      	sub	sp, #36	; 0x24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint8_t usart_tx[USART_DMA_BUFFER_SIZE];
	for (;;) {
 		HAL_SPI_Receive_DMA(&hspi2, spi_rx_buffer, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	492b      	ldr	r1, [pc, #172]	; (8000410 <spi_to_usart+0xb8>)
 8000364:	482b      	ldr	r0, [pc, #172]	; (8000414 <spi_to_usart+0xbc>)
 8000366:	f001 ff99 	bl	800229c <HAL_SPI_Receive_DMA>
		ulTaskNotifyTake(0, portMAX_DELAY);
 800036a:	f04f 31ff 	mov.w	r1, #4294967295
 800036e:	2000      	movs	r0, #0
 8000370:	f004 fa02 	bl	8004778 <ulTaskNotifyTake>
		taskENTER_CRITICAL();
 8000374:	f004 fc3a 	bl	8004bec <vPortEnterCritical>
		for (uint8_t k = 0; k < usart_num_of_bytes; k++) {
 8000378:	2300      	movs	r3, #0
 800037a:	77fb      	strb	r3, [r7, #31]
 800037c:	e010      	b.n	80003a0 <spi_to_usart+0x48>
			usart_tx[k] = reverse_bits(spi_rx_buffer[k]);
 800037e:	7ffb      	ldrb	r3, [r7, #31]
 8000380:	4a23      	ldr	r2, [pc, #140]	; (8000410 <spi_to_usart+0xb8>)
 8000382:	5cd3      	ldrb	r3, [r2, r3]
 8000384:	7ffc      	ldrb	r4, [r7, #31]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fab2 	bl	80008f0 <reverse_bits>
 800038c:	4603      	mov	r3, r0
 800038e:	461a      	mov	r2, r3
 8000390:	f104 0320 	add.w	r3, r4, #32
 8000394:	443b      	add	r3, r7
 8000396:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (uint8_t k = 0; k < usart_num_of_bytes; k++) {
 800039a:	7ffb      	ldrb	r3, [r7, #31]
 800039c:	3301      	adds	r3, #1
 800039e:	77fb      	strb	r3, [r7, #31]
 80003a0:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <spi_to_usart+0xc0>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	7ffa      	ldrb	r2, [r7, #31]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d3e9      	bcc.n	800037e <spi_to_usart+0x26>
		}
		for (uint8_t j = 1; j < usart_num_of_bytes; j += 2) {
 80003aa:	2301      	movs	r3, #1
 80003ac:	77bb      	strb	r3, [r7, #30]
 80003ae:	e01a      	b.n	80003e6 <spi_to_usart+0x8e>
			uint8_t temp = usart_tx[j - 1];
 80003b0:	7fbb      	ldrb	r3, [r7, #30]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	3320      	adds	r3, #32
 80003b6:	443b      	add	r3, r7
 80003b8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80003bc:	777b      	strb	r3, [r7, #29]
			usart_tx[j - 1] = usart_tx[j];
 80003be:	7fba      	ldrb	r2, [r7, #30]
 80003c0:	7fbb      	ldrb	r3, [r7, #30]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	3220      	adds	r2, #32
 80003c6:	443a      	add	r2, r7
 80003c8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80003cc:	3320      	adds	r3, #32
 80003ce:	443b      	add	r3, r7
 80003d0:	f803 2c18 	strb.w	r2, [r3, #-24]
			usart_tx[j] = temp;
 80003d4:	7fbb      	ldrb	r3, [r7, #30]
 80003d6:	3320      	adds	r3, #32
 80003d8:	443b      	add	r3, r7
 80003da:	7f7a      	ldrb	r2, [r7, #29]
 80003dc:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (uint8_t j = 1; j < usart_num_of_bytes; j += 2) {
 80003e0:	7fbb      	ldrb	r3, [r7, #30]
 80003e2:	3302      	adds	r3, #2
 80003e4:	77bb      	strb	r3, [r7, #30]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <spi_to_usart+0xc0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	7fba      	ldrb	r2, [r7, #30]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d3df      	bcc.n	80003b0 <spi_to_usart+0x58>
		}
		HAL_USART_Transmit_DMA(&husart2, usart_tx, usart_num_of_bytes);
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <spi_to_usart+0xc0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	4619      	mov	r1, r3
 80003fc:	4807      	ldr	r0, [pc, #28]	; (800041c <spi_to_usart+0xc4>)
 80003fe:	f002 ffdf 	bl	80033c0 <HAL_USART_Transmit_DMA>
		usart_num_of_bytes = 0;
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <spi_to_usart+0xc0>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8000408:	f004 fc20 	bl	8004c4c <vPortExitCritical>
 		HAL_SPI_Receive_DMA(&hspi2, spi_rx_buffer, 1);
 800040c:	e7a8      	b.n	8000360 <spi_to_usart+0x8>
 800040e:	bf00      	nop
 8000410:	20000330 	.word	0x20000330
 8000414:	20000348 	.word	0x20000348
 8000418:	20000345 	.word	0x20000345
 800041c:	200004b8 	.word	0x200004b8

08000420 <HAL_USART_RxCpltCallback>:
}
/**
 * @brief USART DMA Receive Callback
 * @retval None
 */
void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000428:	4819      	ldr	r0, [pc, #100]	; (8000490 <HAL_USART_RxCpltCallback+0x70>)
 800042a:	f002 fbfd 	bl	8002c28 <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = TIMER_CNT_DEFAULT;
 800042e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8000436:	4816      	ldr	r0, [pc, #88]	; (8000490 <HAL_USART_RxCpltCallback+0x70>)
 8000438:	f002 fba4 	bl	8002b84 <HAL_TIM_Base_Start_IT>
	usart_num_of_bytes++;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_USART_RxCpltCallback+0x74>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <HAL_USART_RxCpltCallback+0x74>)
 8000446:	701a      	strb	r2, [r3, #0]
	if (usart_num_of_bytes > (USART_DMA_BUFFER_SIZE - 1)) {
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_USART_RxCpltCallback+0x74>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b13      	cmp	r3, #19
 800044e:	d910      	bls.n	8000472 <HAL_USART_RxCpltCallback+0x52>
		vTaskNotifyGiveFromISR(usartToSpiHandle, 0);
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <HAL_USART_RxCpltCallback+0x78>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f004 f9da 	bl	8004810 <vTaskNotifyGiveFromISR>
		xTaskResumeFromISR(usartToSpiHandle);
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <HAL_USART_RxCpltCallback+0x78>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f003 fe05 	bl	8004070 <xTaskResumeFromISR>
		xTaskResumeFromISR(lowPowerHandle);
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <HAL_USART_RxCpltCallback+0x7c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f003 fe00 	bl	8004070 <xTaskResumeFromISR>
	} else {
		HAL_USART_Receive_DMA(&husart2, &usart_rx_buffer[usart_num_of_bytes],
				1);
	}

}
 8000470:	e009      	b.n	8000486 <HAL_USART_RxCpltCallback+0x66>
		HAL_USART_Receive_DMA(&husart2, &usart_rx_buffer[usart_num_of_bytes],
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <HAL_USART_RxCpltCallback+0x74>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_USART_RxCpltCallback+0x80>)
 800047a:	4413      	add	r3, r2
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	4808      	ldr	r0, [pc, #32]	; (80004a4 <HAL_USART_RxCpltCallback+0x84>)
 8000482:	f003 f809 	bl	8003498 <HAL_USART_Receive_DMA>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000428 	.word	0x20000428
 8000494:	20000345 	.word	0x20000345
 8000498:	20000584 	.word	0x20000584
 800049c:	2000058c 	.word	0x2000058c
 80004a0:	2000031c 	.word	0x2000031c
 80004a4:	200004b8 	.word	0x200004b8

080004a8 <HAL_SPI_RxCpltCallback>:
/**
 * @brief SPI DMA Receive Callback
 * @retval None
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 80004b0:	4818      	ldr	r0, [pc, #96]	; (8000514 <HAL_SPI_RxCpltCallback+0x6c>)
 80004b2:	f002 fbb9 	bl	8002c28 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = TIMER_CNT_DEFAULT;
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <HAL_SPI_RxCpltCallback+0x70>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 80004bc:	4815      	ldr	r0, [pc, #84]	; (8000514 <HAL_SPI_RxCpltCallback+0x6c>)
 80004be:	f002 fb61 	bl	8002b84 <HAL_TIM_Base_Start_IT>
	spi_num_of_bytes++;
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <HAL_SPI_RxCpltCallback+0x74>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	3301      	adds	r3, #1
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <HAL_SPI_RxCpltCallback+0x74>)
 80004cc:	701a      	strb	r2, [r3, #0]
	if (spi_num_of_bytes > (SPI_DMA_BUFFER_SIZE - 1)) {
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <HAL_SPI_RxCpltCallback+0x74>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b13      	cmp	r3, #19
 80004d4:	d910      	bls.n	80004f8 <HAL_SPI_RxCpltCallback+0x50>
		vTaskNotifyGiveFromISR(spiToUsartHandle, 0);
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_SPI_RxCpltCallback+0x78>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f004 f997 	bl	8004810 <vTaskNotifyGiveFromISR>
		xTaskResumeFromISR(spiToUsartHandle);
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_SPI_RxCpltCallback+0x78>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 fdc2 	bl	8004070 <xTaskResumeFromISR>
		xTaskResumeFromISR(lowPowerHandle);
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <HAL_SPI_RxCpltCallback+0x7c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 fdbd 	bl	8004070 <xTaskResumeFromISR>
	} else {
		HAL_SPI_Receive_DMA(&hspi2, &spi_rx_buffer[spi_num_of_bytes], 1);
	}

}
 80004f6:	e009      	b.n	800050c <HAL_SPI_RxCpltCallback+0x64>
		HAL_SPI_Receive_DMA(&hspi2, &spi_rx_buffer[spi_num_of_bytes], 1);
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_SPI_RxCpltCallback+0x74>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_SPI_RxCpltCallback+0x80>)
 8000500:	4413      	add	r3, r2
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <HAL_SPI_RxCpltCallback+0x84>)
 8000508:	f001 fec8 	bl	800229c <HAL_SPI_Receive_DMA>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000470 	.word	0x20000470
 8000518:	40000400 	.word	0x40000400
 800051c:	20000344 	.word	0x20000344
 8000520:	20000588 	.word	0x20000588
 8000524:	2000058c 	.word	0x2000058c
 8000528:	20000330 	.word	0x20000330
 800052c:	20000348 	.word	0x20000348

08000530 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief TIMER overflow Interrupt Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d102      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 8000542:	f000 fcab 	bl	8000e9c <HAL_IncTick>
		vTaskNotifyGiveFromISR(usartToSpiHandle, 0);
	} else if (htim->Instance == TIM3) {
		vTaskNotifyGiveFromISR(spiToUsartHandle, 0);
	}

}
 8000546:	e016      	b.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x46>
	} else if (htim->Instance == TIM2) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000550:	d106      	bne.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x30>
		vTaskNotifyGiveFromISR(usartToSpiHandle, 0);
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f004 f959 	bl	8004810 <vTaskNotifyGiveFromISR>
}
 800055e:	e00a      	b.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x46>
	} else if (htim->Instance == TIM3) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d105      	bne.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x46>
		vTaskNotifyGiveFromISR(spiToUsartHandle, 0);
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f004 f94d 	bl	8004810 <vTaskNotifyGiveFromISR>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40012c00 	.word	0x40012c00
 8000584:	20000584 	.word	0x20000584
 8000588:	40000400 	.word	0x40000400
 800058c:	20000588 	.word	0x20000588

08000590 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	; 0x40
 8000594:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2228      	movs	r2, #40	; 0x28
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fdfc 	bl	800519c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f8f2 	bl	80017b0 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x46>
		Error_Handler();
 80005d2:	f000 f987 	bl	80008e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fb60 	bl	8001cb4 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6e>
		Error_Handler();
 80005fa:	f000 f973 	bl	80008e4 <Error_Handler>
	}
}
 80005fe:	bf00      	nop
 8000600:	3740      	adds	r7, #64	; 0x40
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

	hspi2.Instance = SPI2;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI2_Init+0x68>)
 800060e:	4a19      	ldr	r2, [pc, #100]	; (8000674 <MX_SPI2_Init+0x6c>)
 8000610:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_SPI2_Init+0x68>)
 8000614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000618:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_SPI2_Init+0x68>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI2_Init+0x68>)
 8000622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000626:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI2_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_SPI2_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI2_Init+0x68>)
 8000636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI2_Init+0x68>)
 800063e:	2228      	movs	r2, #40	; 0x28
 8000640:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI2_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI2_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI2_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI2_Init+0x68>)
 8000656:	220a      	movs	r2, #10
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI2_Init+0x68>)
 800065c:	f001 fce8 	bl	8002030 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI2_Init+0x62>
		Error_Handler();
 8000666:	f000 f93d 	bl	80008e4 <Error_Handler>
	}

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000348 	.word	0x20000348
 8000674:	40003800 	.word	0x40003800

08000678 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
//timer for USART data receive timeout
static void MX_TIM2_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_TIM2_Init+0x94>)
 8000696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_TIM2_Init+0x94>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_TIM2_Init+0x94>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 834;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_TIM2_Init+0x94>)
 80006aa:	f240 3242 	movw	r2, #834	; 0x342
 80006ae:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_TIM2_Init+0x94>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_TIM2_Init+0x94>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_TIM2_Init+0x94>)
 80006be:	f002 fa11 	bl	8002ae4 <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x54>
		Error_Handler();
 80006c8:	f000 f90c 	bl	80008e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_TIM2_Init+0x94>)
 80006da:	f002 fbdb 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0x70>
		Error_Handler();
 80006e4:	f000 f8fe 	bl	80008e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_TIM2_Init+0x94>)
 80006f6:	f002 fdb1 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000700:	f000 f8f0 	bl	80008e4 <Error_Handler>
	}

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000428 	.word	0x20000428

08000710 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
//timer for SPI data receive timeout
static void MX_TIM3_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]

	htim3.Instance = TIM3;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_TIM3_Init+0x94>)
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_TIM3_Init+0x98>)
 8000730:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_TIM3_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 584;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000740:	f44f 7212 	mov.w	r2, #584	; 0x248
 8000744:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_TIM3_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000754:	f002 f9c6 	bl	8002ae4 <HAL_TIM_Base_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM3_Init+0x52>
		Error_Handler();
 800075e:	f000 f8c1 	bl	80008e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_TIM3_Init+0x94>)
 8000770:	f002 fb90 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM3_Init+0x6e>
		Error_Handler();
 800077a:	f000 f8b3 	bl	80008e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_TIM3_Init+0x94>)
 800078c:	f002 fd66 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000796:	f000 f8a5 	bl	80008e4 <Error_Handler>
	}
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000470 	.word	0x20000470
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_USART2_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	husart2.Instance = USART2;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_USART2_Init+0x50>)
 80007b2:	4a13      	ldr	r2, [pc, #76]	; (8000800 <MX_USART2_Init+0x54>)
 80007b4:	601a      	str	r2, [r3, #0]
	husart2.Init.BaudRate = 115200;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_Init+0x50>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
	husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART2_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
	husart2.Init.StopBits = USART_STOPBITS_1;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_USART2_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
	husart2.Init.Parity = USART_PARITY_NONE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	husart2.Init.Mode = USART_MODE_TX_RX;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_USART2_Init+0x50>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
	husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
	husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_USART2_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
	husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
	if (HAL_USART_Init(&husart2) != HAL_OK) {
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_USART2_Init+0x50>)
 80007ea:	f002 fda7 	bl	800333c <HAL_USART_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART2_Init+0x4c>
		Error_Handler();
 80007f4:	f000 f876 	bl	80008e4 <Error_Handler>
	}
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200004b8 	.word	0x200004b8
 8000800:	40004400 	.word	0x40004400

08000804 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_DMA_Init+0x68>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_DMA_Init+0x68>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_DMA_Init+0x68>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	200e      	movs	r0, #14
 8000828:	f000 fc09 	bl	800103e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800082c:	200e      	movs	r0, #14
 800082e:	f000 fc22 	bl	8001076 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	200f      	movs	r0, #15
 8000838:	f000 fc01 	bl	800103e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800083c:	200f      	movs	r0, #15
 800083e:	f000 fc1a 	bl	8001076 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2105      	movs	r1, #5
 8000846:	2010      	movs	r0, #16
 8000848:	f000 fbf9 	bl	800103e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800084c:	2010      	movs	r0, #16
 800084e:	f000 fc12 	bl	8001076 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	2011      	movs	r0, #17
 8000858:	f000 fbf1 	bl	800103e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800085c:	2011      	movs	r0, #17
 800085e:	f000 fc0a 	bl	8001076 <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_GPIO_Init+0x70>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <MX_GPIO_Init+0x70>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_GPIO_Init+0x70>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x70>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_GPIO_Init+0x70>)
 8000894:	f043 0320 	orr.w	r3, r3, #32
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_GPIO_Init+0x70>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f003 0320 	and.w	r3, r3, #32
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_GPIO_Init+0x70>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <MX_GPIO_Init+0x70>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_GPIO_Init+0x70>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_GPIO_Init+0x70>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <MX_GPIO_Init+0x70>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <MX_GPIO_Init+0x70>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000

080008e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop

	__disable_irq();
	NVIC_SystemReset();
 80008ec:	f7ff fc48 	bl	8000180 <__NVIC_SystemReset>

080008f0 <reverse_bits>:
#endif /* USE_FULL_ASSERT */
/**
 * @brief Reversing bit order in byte
 * @retval reversed bit order data
 */
uint8_t reverse_bits(uint8_t number) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reversed_number = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < NUM_OF_BITS_IN_BYTE; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	73bb      	strb	r3, [r7, #14]
 8000902:	e016      	b.n	8000932 <reverse_bits+0x42>
		if (number & (1 << ((NUM_OF_BITS_IN_BYTE - 1) - i))) {
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	f1c3 0307 	rsb	r3, r3, #7
 800090c:	fa42 f303 	asr.w	r3, r2, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d009      	beq.n	800092c <reverse_bits+0x3c>
			reversed_number |= (1 << i);
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	2201      	movs	r2, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	b25a      	sxtb	r2, r3
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4313      	orrs	r3, r2
 8000928:	b25b      	sxtb	r3, r3
 800092a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < NUM_OF_BITS_IN_BYTE; i++) {
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	3301      	adds	r3, #1
 8000930:	73bb      	strb	r3, [r7, #14]
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d9e5      	bls.n	8000904 <reverse_bits+0x14>
		}
	}
	return reversed_number;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_MspInit+0x68>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_MspInit+0x68>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_MspInit+0x68>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x68>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_MspInit+0x68>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x68>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fb5c 	bl	800103e <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x6c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_MspInit+0x6c>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <HAL_SPI_MspInit+0x134>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	f040 8084 	bne.w	8000ade <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <HAL_SPI_MspInit+0x138>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <HAL_SPI_MspInit+0x138>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b42      	ldr	r3, [pc, #264]	; (8000aec <HAL_SPI_MspInit+0x138>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_SPI_MspInit+0x138>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <HAL_SPI_MspInit+0x138>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <HAL_SPI_MspInit+0x138>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a06:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4835      	ldr	r0, [pc, #212]	; (8000af0 <HAL_SPI_MspInit+0x13c>)
 8000a1c:	f000 fd28 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	482e      	ldr	r0, [pc, #184]	; (8000af0 <HAL_SPI_MspInit+0x13c>)
 8000a36:	f000 fd1b 	bl	8001470 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a3c:	4a2e      	ldr	r2, [pc, #184]	; (8000af8 <HAL_SPI_MspInit+0x144>)
 8000a3e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000a70:	4820      	ldr	r0, [pc, #128]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a72:	f000 fb0f 	bl	8001094 <HAL_DMA_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000a7c:	f7ff ff32 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a84:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_SPI_MspInit+0x140>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_SPI_MspInit+0x14c>)
 8000a90:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000a94:	2210      	movs	r2, #16
 8000a96:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aaa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000ac4:	f000 fae6 	bl	8001094 <HAL_DMA_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8000ace:	f7ff ff09 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000ad6:	649a      	str	r2, [r3, #72]	; 0x48
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_SPI_MspInit+0x148>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40003800 	.word	0x40003800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	200003a0 	.word	0x200003a0
 8000af8:	40020044 	.word	0x40020044
 8000afc:	200003e4 	.word	0x200003e4
 8000b00:	40020058 	.word	0x40020058

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d10c      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_TIM_Base_MspInit+0x58>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_TIM_Base_MspInit+0x58>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_TIM_Base_MspInit+0x58>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b2e:	e010      	b.n	8000b52 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_TIM_Base_MspInit+0x5c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10b      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_TIM_Base_MspInit+0x58>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_TIM_Base_MspInit+0x58>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_TIM_Base_MspInit+0x58>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40000400 	.word	0x40000400

08000b64 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <HAL_USART_MspInit+0x124>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d17d      	bne.n	8000c80 <HAL_USART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <HAL_USART_MspInit+0x128>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_USART_MspInit+0x128>)
 8000b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8e:	61d3      	str	r3, [r2, #28]
 8000b90:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <HAL_USART_MspInit+0x128>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <HAL_USART_MspInit+0x128>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <HAL_USART_MspInit+0x128>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <HAL_USART_MspInit+0x128>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000bb4:	2314      	movs	r3, #20
 8000bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4832      	ldr	r0, [pc, #200]	; (8000c90 <HAL_USART_MspInit+0x12c>)
 8000bc8:	f000 fc52 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482c      	ldr	r0, [pc, #176]	; (8000c90 <HAL_USART_MspInit+0x12c>)
 8000be0:	f000 fc46 	bl	8001470 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000be6:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <HAL_USART_MspInit+0x134>)
 8000be8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c16:	481f      	ldr	r0, [pc, #124]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000c18:	f000 fa3c 	bl	8001094 <HAL_DMA_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_USART_MspInit+0xc2>
    {
      Error_Handler();
 8000c22:	f7ff fe5f 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmarx,hdma_usart2_rx);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1a      	ldr	r2, [pc, #104]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_USART_MspInit+0x130>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <HAL_USART_MspInit+0x13c>)
 8000c36:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c66:	f000 fa15 	bl	8001094 <HAL_DMA_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8000c70:	f7ff fe38 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart2_tx);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_USART_MspInit+0x138>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	200004fc 	.word	0x200004fc
 8000c98:	4002006c 	.word	0x4002006c
 8000c9c:	20000540 	.word	0x20000540
 8000ca0:	40020080 	.word	0x40020080

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <HAL_InitTick+0xd0>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <HAL_InitTick+0xd0>)
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_InitTick+0xd0>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd2:	f107 020c 	add.w	r2, r7, #12
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 f959 	bl	8001f94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ce2:	f001 f943 	bl	8001f6c <HAL_RCC_GetPCLK2Freq>
 8000ce6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <HAL_InitTick+0xd4>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <HAL_InitTick+0xd8>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <HAL_InitTick+0xdc>)
 8000cfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_InitTick+0xd8>)
 8000cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_InitTick+0xd8>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_InitTick+0xd8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_InitTick+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <HAL_InitTick+0xd8>)
 8000d1e:	f001 fee1 	bl	8002ae4 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11b      	bne.n	8000d68 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <HAL_InitTick+0xd8>)
 8000d32:	f001 ff27 	bl	8002b84 <HAL_TIM_Base_Start_IT>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 f996 	bl	8001076 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d808      	bhi.n	8000d62 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2019      	movs	r0, #25
 8000d56:	f000 f972 	bl	800103e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_InitTick+0xe0>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e002      	b.n	8000d68 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	20000590 	.word	0x20000590
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	20000004 	.word	0x20000004

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
	...

08000db4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <DMA1_Channel4_IRQHandler+0x10>)
 8000dba:	f000 fa25 	bl	8001208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200003a0 	.word	0x200003a0

08000dc8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <DMA1_Channel5_IRQHandler+0x10>)
 8000dce:	f000 fa1b 	bl	8001208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200003e4 	.word	0x200003e4

08000ddc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <DMA1_Channel6_IRQHandler+0x10>)
 8000de2:	f000 fa11 	bl	8001208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200004fc 	.word	0x200004fc

08000df0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <DMA1_Channel7_IRQHandler+0x10>)
 8000df6:	f000 fa07 	bl	8001208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000540 	.word	0x20000540

08000e04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM1_UP_IRQHandler+0x10>)
 8000e0a:	f001 ff3b 	bl	8002c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000590 	.word	0x20000590

08000e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e24:	f7ff fff8 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2a:	490c      	ldr	r1, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e40:	4c09      	ldr	r4, [pc, #36]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f004 fa03 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff f9ab 	bl	80001ac <main>
  bx lr
 8000e56:	4770      	bx	lr
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e60:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 8000e64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e68:	20001468 	.word	0x20001468

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x28>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f8d1 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff ff0c 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fd5a 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x20>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200005d8 	.word	0x200005d8

08000ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	200005d8 	.word	0x200005d8

08000ed4 <__NVIC_SetPriorityGrouping>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <__NVIC_EnableIRQ+0x34>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff4f 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff64 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ffb2 	bl	8000fc4 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff81 	bl	8000f70 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff57 	bl	8000f38 <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e043      	b.n	8001132 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_DMA_Init+0xa8>)
 80010b2:	4413      	add	r3, r2
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <HAL_DMA_Init+0xac>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	009a      	lsls	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_DMA_Init+0xb0>)
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	bffdfff8 	.word	0xbffdfff8
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_DMA_Start_IT+0x20>
 8001164:	2302      	movs	r3, #2
 8001166:	e04b      	b.n	8001200 <HAL_DMA_Start_IT+0xb8>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d13a      	bne.n	80011f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2202      	movs	r2, #2
 8001180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0201 	bic.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f937 	bl	8001414 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 020e 	orr.w	r2, r2, #14
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e00f      	b.n	80011e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 020a 	orr.w	r2, r2, #10
 80011de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e005      	b.n	80011fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011fa:	2302      	movs	r3, #2
 80011fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	2204      	movs	r2, #4
 8001226:	409a      	lsls	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d04f      	beq.n	80012d0 <HAL_DMA_IRQHandler+0xc8>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d04a      	beq.n	80012d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	2b00      	cmp	r3, #0
 8001246:	d107      	bne.n	8001258 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0204 	bic.w	r2, r2, #4
 8001256:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a66      	ldr	r2, [pc, #408]	; (80013f8 <HAL_DMA_IRQHandler+0x1f0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d029      	beq.n	80012b6 <HAL_DMA_IRQHandler+0xae>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a65      	ldr	r2, [pc, #404]	; (80013fc <HAL_DMA_IRQHandler+0x1f4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <HAL_DMA_IRQHandler+0xaa>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a63      	ldr	r2, [pc, #396]	; (8001400 <HAL_DMA_IRQHandler+0x1f8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01a      	beq.n	80012ac <HAL_DMA_IRQHandler+0xa4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a62      	ldr	r2, [pc, #392]	; (8001404 <HAL_DMA_IRQHandler+0x1fc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d012      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x9e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a60      	ldr	r2, [pc, #384]	; (8001408 <HAL_DMA_IRQHandler+0x200>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00a      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x98>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a5f      	ldr	r2, [pc, #380]	; (800140c <HAL_DMA_IRQHandler+0x204>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d102      	bne.n	800129a <HAL_DMA_IRQHandler+0x92>
 8001294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001298:	e00e      	b.n	80012b8 <HAL_DMA_IRQHandler+0xb0>
 800129a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800129e:	e00b      	b.n	80012b8 <HAL_DMA_IRQHandler+0xb0>
 80012a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012a4:	e008      	b.n	80012b8 <HAL_DMA_IRQHandler+0xb0>
 80012a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012aa:	e005      	b.n	80012b8 <HAL_DMA_IRQHandler+0xb0>
 80012ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b0:	e002      	b.n	80012b8 <HAL_DMA_IRQHandler+0xb0>
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	e000      	b.n	80012b8 <HAL_DMA_IRQHandler+0xb0>
 80012b6:	2304      	movs	r3, #4
 80012b8:	4a55      	ldr	r2, [pc, #340]	; (8001410 <HAL_DMA_IRQHandler+0x208>)
 80012ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8094 	beq.w	80013ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012ce:	e08e      	b.n	80013ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	2202      	movs	r2, #2
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d056      	beq.n	800138e <HAL_DMA_IRQHandler+0x186>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d051      	beq.n	800138e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10b      	bne.n	8001310 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 020a 	bic.w	r2, r2, #10
 8001306:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a38      	ldr	r2, [pc, #224]	; (80013f8 <HAL_DMA_IRQHandler+0x1f0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d029      	beq.n	800136e <HAL_DMA_IRQHandler+0x166>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a37      	ldr	r2, [pc, #220]	; (80013fc <HAL_DMA_IRQHandler+0x1f4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d022      	beq.n	800136a <HAL_DMA_IRQHandler+0x162>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <HAL_DMA_IRQHandler+0x1f8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01a      	beq.n	8001364 <HAL_DMA_IRQHandler+0x15c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_DMA_IRQHandler+0x1fc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d012      	beq.n	800135e <HAL_DMA_IRQHandler+0x156>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_DMA_IRQHandler+0x200>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00a      	beq.n	8001358 <HAL_DMA_IRQHandler+0x150>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_DMA_IRQHandler+0x204>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d102      	bne.n	8001352 <HAL_DMA_IRQHandler+0x14a>
 800134c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001350:	e00e      	b.n	8001370 <HAL_DMA_IRQHandler+0x168>
 8001352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001356:	e00b      	b.n	8001370 <HAL_DMA_IRQHandler+0x168>
 8001358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135c:	e008      	b.n	8001370 <HAL_DMA_IRQHandler+0x168>
 800135e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001362:	e005      	b.n	8001370 <HAL_DMA_IRQHandler+0x168>
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	e002      	b.n	8001370 <HAL_DMA_IRQHandler+0x168>
 800136a:	2320      	movs	r3, #32
 800136c:	e000      	b.n	8001370 <HAL_DMA_IRQHandler+0x168>
 800136e:	2302      	movs	r3, #2
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_DMA_IRQHandler+0x208>)
 8001372:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	2b00      	cmp	r3, #0
 8001382:	d034      	beq.n	80013ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800138c:	e02f      	b.n	80013ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2208      	movs	r2, #8
 8001394:	409a      	lsls	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d028      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x1e8>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 020e 	bic.w	r2, r2, #14
 80013b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
    }
  }
  return;
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
}
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020008 	.word	0x40020008
 80013fc:	4002001c 	.word	0x4002001c
 8001400:	40020030 	.word	0x40020030
 8001404:	40020044 	.word	0x40020044
 8001408:	40020058 	.word	0x40020058
 800140c:	4002006c 	.word	0x4002006c
 8001410:	40020000 	.word	0x40020000

08001414 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d108      	bne.n	8001454 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001452:	e007      	b.n	8001464 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	60da      	str	r2, [r3, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b08b      	sub	sp, #44	; 0x2c
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e169      	b.n	8001758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001484:	2201      	movs	r2, #1
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	429a      	cmp	r2, r3
 800149e:	f040 8158 	bne.w	8001752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a9a      	ldr	r2, [pc, #616]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d05e      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014ac:	4a98      	ldr	r2, [pc, #608]	; (8001710 <HAL_GPIO_Init+0x2a0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d875      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014b2:	4a98      	ldr	r2, [pc, #608]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d058      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014b8:	4a96      	ldr	r2, [pc, #600]	; (8001714 <HAL_GPIO_Init+0x2a4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d86f      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014be:	4a96      	ldr	r2, [pc, #600]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d052      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014c4:	4a94      	ldr	r2, [pc, #592]	; (8001718 <HAL_GPIO_Init+0x2a8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d869      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014ca:	4a94      	ldr	r2, [pc, #592]	; (800171c <HAL_GPIO_Init+0x2ac>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d04c      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014d0:	4a92      	ldr	r2, [pc, #584]	; (800171c <HAL_GPIO_Init+0x2ac>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d863      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014d6:	4a92      	ldr	r2, [pc, #584]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d046      	beq.n	800156a <HAL_GPIO_Init+0xfa>
 80014dc:	4a90      	ldr	r2, [pc, #576]	; (8001720 <HAL_GPIO_Init+0x2b0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d85d      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d82a      	bhi.n	800153c <HAL_GPIO_Init+0xcc>
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d859      	bhi.n	800159e <HAL_GPIO_Init+0x12e>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <HAL_GPIO_Init+0x80>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	08001545 	.word	0x08001545
 80014f8:	08001557 	.word	0x08001557
 80014fc:	08001599 	.word	0x08001599
 8001500:	0800159f 	.word	0x0800159f
 8001504:	0800159f 	.word	0x0800159f
 8001508:	0800159f 	.word	0x0800159f
 800150c:	0800159f 	.word	0x0800159f
 8001510:	0800159f 	.word	0x0800159f
 8001514:	0800159f 	.word	0x0800159f
 8001518:	0800159f 	.word	0x0800159f
 800151c:	0800159f 	.word	0x0800159f
 8001520:	0800159f 	.word	0x0800159f
 8001524:	0800159f 	.word	0x0800159f
 8001528:	0800159f 	.word	0x0800159f
 800152c:	0800159f 	.word	0x0800159f
 8001530:	0800159f 	.word	0x0800159f
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001561 	.word	0x08001561
 800153c:	4a79      	ldr	r2, [pc, #484]	; (8001724 <HAL_GPIO_Init+0x2b4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001542:	e02c      	b.n	800159e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e029      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	3304      	adds	r3, #4
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e024      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	3308      	adds	r3, #8
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e01f      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	330c      	adds	r3, #12
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e01a      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001572:	2304      	movs	r3, #4
 8001574:	623b      	str	r3, [r7, #32]
          break;
 8001576:	e013      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001580:	2308      	movs	r3, #8
 8001582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	611a      	str	r2, [r3, #16]
          break;
 800158a:	e009      	b.n	80015a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	615a      	str	r2, [r3, #20]
          break;
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x130>
          break;
 800159e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2bff      	cmp	r3, #255	; 0xff
 80015a4:	d801      	bhi.n	80015aa <HAL_GPIO_Init+0x13a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_Init+0x13e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3304      	adds	r3, #4
 80015ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d802      	bhi.n	80015bc <HAL_GPIO_Init+0x14c>
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x152>
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	3b08      	subs	r3, #8
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	210f      	movs	r1, #15
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	6a39      	ldr	r1, [r7, #32]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80b1 	beq.w	8001752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001608:	4a48      	ldr	r2, [pc, #288]	; (800172c <HAL_GPIO_Init+0x2bc>)
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a40      	ldr	r2, [pc, #256]	; (8001730 <HAL_GPIO_Init+0x2c0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_GPIO_Init+0x1ec>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3f      	ldr	r2, [pc, #252]	; (8001734 <HAL_GPIO_Init+0x2c4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1e8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <HAL_GPIO_Init+0x2c8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1e4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3d      	ldr	r2, [pc, #244]	; (800173c <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1e0>
 800164c:	2303      	movs	r3, #3
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001650:	2304      	movs	r3, #4
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1ee>
 800165c:	2300      	movs	r3, #0
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166e:	492f      	ldr	r1, [pc, #188]	; (800172c <HAL_GPIO_Init+0x2bc>)
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	492c      	ldr	r1, [pc, #176]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	43db      	mvns	r3, r3
 800169e:	4928      	ldr	r1, [pc, #160]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4922      	ldr	r1, [pc, #136]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	491e      	ldr	r1, [pc, #120]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4918      	ldr	r1, [pc, #96]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4914      	ldr	r1, [pc, #80]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d021      	beq.n	8001744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	490e      	ldr	r1, [pc, #56]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e021      	b.n	8001752 <HAL_GPIO_Init+0x2e2>
 800170e:	bf00      	nop
 8001710:	10320000 	.word	0x10320000
 8001714:	10310000 	.word	0x10310000
 8001718:	10220000 	.word	0x10220000
 800171c:	10210000 	.word	0x10210000
 8001720:	10120000 	.word	0x10120000
 8001724:	10110000 	.word	0x10110000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40011400 	.word	0x40011400
 8001740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_GPIO_Init+0x304>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	43db      	mvns	r3, r3
 800174c:	4909      	ldr	r1, [pc, #36]	; (8001774 <HAL_GPIO_Init+0x304>)
 800174e:	4013      	ands	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae8e 	bne.w	8001484 <HAL_GPIO_Init+0x14>
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	372c      	adds	r7, #44	; 0x2c
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_PWR_EnterSLEEPMode+0x34>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_PWR_EnterSLEEPMode+0x34>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001796:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001798:	e002      	b.n	80017a0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800179a:	bf40      	sev
    __WFE();
 800179c:	bf20      	wfe
    __WFE();
 800179e:	bf20      	wfe
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e272      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8087 	beq.w	80018de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d0:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d00c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017dc:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d112      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
 80017e8:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d10b      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06c      	beq.n	80018dc <HAL_RCC_OscConfig+0x12c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d168      	bne.n	80018dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e24c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x76>
 8001818:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x98>
 800182e:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7a      	ldr	r2, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xbc>
 8001852:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a71      	ldr	r2, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6a      	ldr	r2, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fb18 	bl	8000ec0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fb14 	bl	8000ec0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e200      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xe4>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb04 	bl	8000ec0 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fb00 	bl	8000ec0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1ec      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x10c>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ea:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x18c>
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x176>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1c0      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4939      	ldr	r1, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fab9 	bl	8000ec0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fab5 	bl	8000ec0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1a1      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa98 	bl	8000ec0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fa94 	bl	8000ec0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e180      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d03a      	beq.n	8001a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff fa78 	bl	8000ec0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fa74 	bl	8000ec0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e160      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f000 fafe 	bl	8001ff4 <RCC_Delay>
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff fa5e 	bl	8000ec0 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a06:	e00f      	b.n	8001a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fa5a 	bl	8000ec0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d908      	bls.n	8001a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e146      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	42420000 	.word	0x42420000
 8001a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b92      	ldr	r3, [pc, #584]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e9      	bne.n	8001a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a6 	beq.w	8001b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a87      	ldr	r2, [pc, #540]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b82      	ldr	r3, [pc, #520]	; (8001c78 <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x4c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x4c8>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fa1b 	bl	8000ec0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff fa17 	bl	8000ec0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b64      	cmp	r3, #100	; 0x64
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e103      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x4c8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x312>
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e02d      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x334>
 8001aca:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a69      	ldr	r2, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	e01c      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCC_OscConfig+0x356>
 8001aec:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a60      	ldr	r2, [pc, #384]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001b06:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a57      	ldr	r2, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d015      	beq.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f9cb 	bl	8000ec0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f9c7 	bl	8000ec0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0b1      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	4b4b      	ldr	r3, [pc, #300]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ee      	beq.n	8001b2e <HAL_RCC_OscConfig+0x37e>
 8001b50:	e014      	b.n	8001b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff f9b5 	bl	8000ec0 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f9b1 	bl	8000ec0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e09b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ee      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d105      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b82:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a3b      	ldr	r2, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8087 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d061      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d146      	bne.n	8001c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f985 	bl	8000ec0 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff f981 	bl	8000ec0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e06d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d108      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	4921      	ldr	r1, [pc, #132]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a19      	ldr	r1, [r3, #32]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	430b      	orrs	r3, r1
 8001c06:	491b      	ldr	r1, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff f955 	bl	8000ec0 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f951 	bl	8000ec0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e03d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46a>
 8001c38:	e035      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f93e 	bl	8000ec0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f93a 	bl	8000ec0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e026      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x498>
 8001c66:	e01e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e019      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x500>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0d0      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b6a      	ldr	r3, [pc, #424]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d910      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b67      	ldr	r3, [pc, #412]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4965      	ldr	r1, [pc, #404]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b63      	ldr	r3, [pc, #396]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0b8      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d020      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d10:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	494d      	ldr	r1, [pc, #308]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d040      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d115      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e07f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e073      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06b      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f023 0203 	bic.w	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4936      	ldr	r1, [pc, #216]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da4:	f7ff f88c 	bl	8000ec0 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff f888 	bl	8000ec0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e053      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 020c 	and.w	r2, r3, #12
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1eb      	bne.n	8001dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d210      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	4922      	ldr	r1, [pc, #136]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e032      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4916      	ldr	r1, [pc, #88]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e42:	f000 f821 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	490a      	ldr	r1, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	5ccb      	ldrb	r3, [r1, r3]
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1cc>)
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1d0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe ff1e 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	080053e4 	.word	0x080053e4
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x36>
 8001eb6:	e027      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eba:	613b      	str	r3, [r7, #16]
      break;
 8001ebc:	e027      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
 8001eca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d010      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0c5b      	lsrs	r3, r3, #17
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eea:	fb03 f202 	mul.w	r2, r3, r2
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e004      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	613b      	str	r3, [r7, #16]
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0e:	693b      	ldr	r3, [r7, #16]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	007a1200 	.word	0x007a1200
 8001f24:	080053fc 	.word	0x080053fc
 8001f28:	0800540c 	.word	0x0800540c
 8001f2c:	003d0900 	.word	0x003d0900

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	20000000 	.word	0x20000000

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f48:	f7ff fff2 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080053f4 	.word	0x080053f4

08001f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0adb      	lsrs	r3, r3, #11
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	4903      	ldr	r1, [pc, #12]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f82:	5ccb      	ldrb	r3, [r1, r3]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	080053f4 	.word	0x080053f4

08001f94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_GetClockConfig+0x58>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_RCC_GetClockConfig+0x58>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_GetClockConfig+0x58>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCC_GetClockConfig+0x58>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0207 	and.w	r2, r3, #7
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <RCC_Delay+0x34>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <RCC_Delay+0x38>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0a5b      	lsrs	r3, r3, #9
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002010:	bf00      	nop
  }
  while (Delay --);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f9      	bne.n	8002010 <RCC_Delay+0x1c>
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000000 	.word	0x20000000
 800202c:	10624dd3 	.word	0x10624dd3

08002030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e076      	b.n	8002130 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d108      	bne.n	800205c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002052:	d009      	beq.n	8002068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
 800205a:	e005      	b.n	8002068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fc96 	bl	80009b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	ea42 0103 	orr.w	r1, r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	0c1a      	lsrs	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f002 0204 	and.w	r2, r2, #4
 800210e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_SPI_Transmit_DMA+0x20>
 8002154:	2302      	movs	r3, #2
 8002156:	e097      	b.n	8002288 <HAL_SPI_Transmit_DMA+0x150>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d002      	beq.n	8002172 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002170:	e085      	b.n	800227e <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_SPI_Transmit_DMA+0x46>
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002182:	e07c      	b.n	800227e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2203      	movs	r2, #3
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ca:	d10f      	bne.n	80021ec <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_SPI_Transmit_DMA+0x158>)
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <HAL_SPI_Transmit_DMA+0x15c>)
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002200:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_SPI_Transmit_DMA+0x160>)
 8002202:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4619      	mov	r1, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002222:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002224:	f7fe ff90 	bl	8001148 <HAL_DMA_Start_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800223e:	e01e      	b.n	800227e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d007      	beq.n	800225e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0202 	orr.w	r2, r2, #2
 800227c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	0800285f 	.word	0x0800285f
 8002294:	08002685 	.word	0x08002685
 8002298:	080028b3 	.word	0x080028b3

0800229c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d002      	beq.n	80022c0 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
 80022bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022be:	e0a2      	b.n	8002406 <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d110      	bne.n	80022ea <HAL_SPI_Receive_DMA+0x4e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d0:	d10b      	bne.n	80022ea <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2204      	movs	r2, #4
 80022d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f89f 	bl	8002424 <HAL_SPI_TransmitReceive_DMA>
 80022e6:	4603      	mov	r3, r0
 80022e8:	e092      	b.n	8002410 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_SPI_Receive_DMA+0x5c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e08b      	b.n	8002410 <HAL_SPI_Receive_DMA+0x174>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_SPI_Receive_DMA+0x70>
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002310:	e079      	b.n	8002406 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2204      	movs	r2, #4
 8002316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002352:	d10f      	bne.n	8002374 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002362:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_SPI_Receive_DMA+0x17c>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <HAL_SPI_Receive_DMA+0x180>)
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <HAL_SPI_Receive_DMA+0x184>)
 800238a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	2200      	movs	r2, #0
 8002392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	330c      	adds	r3, #12
 800239e:	4619      	mov	r1, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80023ac:	f7fe fecc 	bl	8001148 <HAL_DMA_Start_IT>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80023c6:	e01e      	b.n	8002406 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d007      	beq.n	80023e6 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800240e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	0800287b 	.word	0x0800287b
 800241c:	0800272b 	.word	0x0800272b
 8002420:	080028b3 	.word	0x080028b3

08002424 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002440:	2302      	movs	r3, #2
 8002442:	e0db      	b.n	80025fc <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002452:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800245a:	7dbb      	ldrb	r3, [r7, #22]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d00d      	beq.n	800247c <HAL_SPI_TransmitReceive_DMA+0x58>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002466:	d106      	bne.n	8002476 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002470:	7dbb      	ldrb	r3, [r7, #22]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d002      	beq.n	800247c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	75fb      	strb	r3, [r7, #23]
    goto error;
 800247a:	e0ba      	b.n	80025f2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002492:	e0ae      	b.n	80025f2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b04      	cmp	r3, #4
 800249e:	d003      	beq.n	80024a8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d108      	bne.n	80024fc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	4a44      	ldr	r2, [pc, #272]	; (8002608 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
 80024fa:	e007      	b.n	800250c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	4a42      	ldr	r2, [pc, #264]	; (800260c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	4a41      	ldr	r2, [pc, #260]	; (8002610 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	4a40      	ldr	r2, [pc, #256]	; (8002614 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002512:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	2200      	movs	r2, #0
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	330c      	adds	r3, #12
 8002526:	4619      	mov	r1, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002534:	f7fe fe08 	bl	8001148 <HAL_DMA_Start_IT>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800254e:	e050      	b.n	80025f2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	2200      	movs	r2, #0
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257c:	2200      	movs	r2, #0
 800257e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4619      	mov	r1, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002596:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002598:	f7fe fdd6 	bl	8001148 <HAL_DMA_Start_IT>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]

    goto error;
 80025b2:	e01e      	b.n	80025f2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d007      	beq.n	80025d2 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0202 	orr.w	r2, r2, #2
 80025f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0800287b 	.word	0x0800287b
 8002608:	0800272b 	.word	0x0800272b
 800260c:	08002897 	.word	0x08002897
 8002610:	080027d1 	.word	0x080027d1
 8002614:	080028b3 	.word	0x080028b3

08002618 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002692:	f7fe fc15 	bl	8000ec0 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d03b      	beq.n	800271e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0202 	bic.w	r2, r2, #2
 80026c4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	2164      	movs	r1, #100	; 0x64
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f000 f9ec 	bl	8002aa8 <SPI_EndRxTxTransaction>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2200      	movs	r2, #0
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ffab 	bl	8002672 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800271c:	e002      	b.n	8002724 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff7a 	bl	8002618 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002738:	f7fe fbc2 	bl	8000ec0 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b20      	cmp	r3, #32
 800274a:	d03b      	beq.n	80027c4 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0220 	bic.w	r2, r2, #32
 800275a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <SPI_DMAReceiveCplt+0x56>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800276c:	d108      	bne.n	8002780 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0203 	bic.w	r2, r2, #3
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	e007      	b.n	8002790 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	2164      	movs	r1, #100	; 0x64
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f935 	bl	8002a04 <SPI_EndRxTransaction>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff ff58 	bl	8002672 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80027c2:	e002      	b.n	80027ca <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7fd fe6f 	bl	80004a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027de:	f7fe fb6f 	bl	8000ec0 <HAL_GetTick>
 80027e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d02f      	beq.n	8002852 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0220 	bic.w	r2, r2, #32
 8002800:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	2164      	movs	r1, #100	; 0x64
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f94e 	bl	8002aa8 <SPI_EndRxTxTransaction>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0203 	bic.w	r2, r2, #3
 800282c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff ff11 	bl	8002672 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002850:	e002      	b.n	8002858 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff fee9 	bl	800262a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fee5 	bl	800263c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fee0 	bl	800264e <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fedb 	bl	8002660 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0203 	bic.w	r2, r2, #3
 80028ce:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fec4 	bl	8002672 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002904:	f7fe fadc 	bl	8000ec0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002914:	f7fe fad4 	bl	8000ec0 <HAL_GetTick>
 8002918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800291a:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	015b      	lsls	r3, r3, #5
 8002920:	0d1b      	lsrs	r3, r3, #20
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800292a:	e054      	b.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d050      	beq.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002934:	f7fe fac4 	bl	8000ec0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	429a      	cmp	r2, r3
 8002942:	d902      	bls.n	800294a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d13d      	bne.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002962:	d111      	bne.n	8002988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296c:	d004      	beq.n	8002978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d107      	bne.n	8002988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d10f      	bne.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e017      	b.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d19b      	bne.n	800292c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000

08002a04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a18:	d111      	bne.n	8002a3e <SPI_EndRxTransaction+0x3a>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a22:	d004      	beq.n	8002a2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2c:	d107      	bne.n	8002a3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a46:	d117      	bne.n	8002a78 <SPI_EndRxTransaction+0x74>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a50:	d112      	bne.n	8002a78 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff ff49 	bl	80028f4 <SPI_WaitFlagStateUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01a      	beq.n	8002a9e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e013      	b.n	8002aa0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f7ff ff36 	bl	80028f4 <SPI_WaitFlagStateUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e000      	b.n	8002aa0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff ff18 	bl	80028f4 <SPI_WaitFlagStateUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e000      	b.n	8002adc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e041      	b.n	8002b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fffa 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 faa2 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e03a      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_TIM_Base_Start_IT+0x98>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x58>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x58>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x58>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d010      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e007      	b.n	8002c10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800

08002c28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <HAL_TIM_Base_Stop_IT+0x48>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	f240 4344 	movw	r3, #1092	; 0x444
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_Base_Stop_IT+0x48>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0202 	mvn.w	r2, #2
 8002cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9b4 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9a7 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f9b6 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0204 	mvn.w	r2, #4
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f98a 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f97d 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f98c 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0208 	mvn.w	r2, #8
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f960 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f953 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f962 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d122      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0210 	mvn.w	r2, #16
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2208      	movs	r2, #8
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f936 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f929 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f938 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0201 	mvn.w	r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fb94 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b80      	cmp	r3, #128	; 0x80
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fa7b 	bl	800332a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8fc 	bl	8003058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0220 	mvn.w	r2, #32
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa46 	bl	8003318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0b4      	b.n	800301a <HAL_TIM_ConfigClockSource+0x186>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d03e      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0xd4>
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eee:	f200 8087 	bhi.w	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	f000 8086 	beq.w	8003006 <HAL_TIM_ConfigClockSource+0x172>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d87f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b70      	cmp	r3, #112	; 0x70
 8002f02:	d01a      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xa6>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d87b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b60      	cmp	r3, #96	; 0x60
 8002f0a:	d050      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x11a>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d877      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b50      	cmp	r3, #80	; 0x50
 8002f12:	d03c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xfa>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d873      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d058      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x13a>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d86f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b30      	cmp	r3, #48	; 0x30
 8002f22:	d064      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d86b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d060      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d867      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d05a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	e062      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	f000 f968 	bl	800321e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	609a      	str	r2, [r3, #8]
      break;
 8002f66:	e04f      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	f000 f951 	bl	800321e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8a:	609a      	str	r2, [r3, #8]
      break;
 8002f8c:	e03c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 f8c8 	bl	8003130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2150      	movs	r1, #80	; 0x50
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f91f 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fac:	e02c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f8e6 	bl	800318c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2160      	movs	r1, #96	; 0x60
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f90f 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e01c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f8a8 	bl	8003130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8ff 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fec:	e00c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 f8f6 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e003      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e000      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a29      	ldr	r2, [pc, #164]	; (8003124 <TIM_Base_SetConfig+0xb8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00b      	beq.n	800309c <TIM_Base_SetConfig+0x30>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308a:	d007      	beq.n	800309c <TIM_Base_SetConfig+0x30>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a26      	ldr	r2, [pc, #152]	; (8003128 <TIM_Base_SetConfig+0xbc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_Base_SetConfig+0x30>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a25      	ldr	r2, [pc, #148]	; (800312c <TIM_Base_SetConfig+0xc0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d108      	bne.n	80030ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <TIM_Base_SetConfig+0xb8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00b      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d007      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <TIM_Base_SetConfig+0xbc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <TIM_Base_SetConfig+0xc0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <TIM_Base_SetConfig+0xb8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d103      	bne.n	8003114 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	615a      	str	r2, [r3, #20]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800

08003130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0201 	bic.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800315a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 030a 	bic.w	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f023 0210 	bic.w	r2, r3, #16
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	031b      	lsls	r3, r3, #12
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	f043 0307 	orr.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	021a      	lsls	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	431a      	orrs	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e046      	b.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a16      	ldr	r2, [pc, #88]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d009      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10c      	bne.n	80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800

08003318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e033      	b.n	80033b6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fbfe 	bl	8000b64 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fa91 	bl	8003898 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003394:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_USART_Transmit_DMA>:
  * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d153      	bne.n	8003482 <HAL_USART_Transmit_DMA+0xc2>
  {
    if ((pTxData == NULL) || (Size == 0))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_USART_Transmit_DMA+0x26>
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_USART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e04c      	b.n	8003484 <HAL_USART_Transmit_DMA+0xc4>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_USART_Transmit_DMA+0x38>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e045      	b.n	8003484 <HAL_USART_Transmit_DMA+0xc4>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2212      	movs	r2, #18
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the USART DMA transfer complete callback */
    husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_USART_Transmit_DMA+0xcc>)
 8003426:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the USART DMA Half transfer complete callback */
    husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_USART_Transmit_DMA+0xd0>)
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    husart->hdmatx->XferErrorCallback = USART_DMAError;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_USART_Transmit_DMA+0xd4>)
 8003436:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    husart->hdmatx->XferAbortCallback = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	2200      	movs	r2, #0
 800343e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the USART transmit DMA channel */
    tmp = (const uint32_t *)&pTxData;
 8003440:	f107 0308 	add.w	r3, r7, #8
 8003444:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(husart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3304      	adds	r3, #4
 8003454:	461a      	mov	r2, r3
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	f7fd fe76 	bl	8001148 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_USART_CLEAR_FLAG(husart, USART_FLAG_TC);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003464:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e000      	b.n	8003484 <HAL_USART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
  }
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	0800364f 	.word	0x0800364f
 8003490:	080036b9 	.word	0x080036b9
 8003494:	08003799 	.word	0x08003799

08003498 <HAL_USART_Receive_DMA>:
  * @retval HAL status
  * @note   The USART DMA transmit channel must be configured in order to generate the clock for the slave.
  * @note   When the USART parity is enabled (PCE = 1) the data received contain the parity bit.
  */
HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 8094 	bne.w	80035dc <HAL_USART_Receive_DMA+0x144>
  {
    if ((pRxData == NULL) || (Size == 0))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_USART_Receive_DMA+0x28>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_USART_Receive_DMA+0x2c>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e08c      	b.n	80035de <HAL_USART_Receive_DMA+0x146>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_USART_Receive_DMA+0x3a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e085      	b.n	80035de <HAL_USART_Receive_DMA+0x146>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pRxBuffPtr = pRxData;
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
    husart->RxXferSize = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->pTxBuffPtr = pRxData;
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2222      	movs	r2, #34	; 0x22
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the USART DMA Rx transfer complete callback */
    husart->hdmarx->XferCpltCallback = USART_DMAReceiveCplt;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_USART_Receive_DMA+0x150>)
 8003506:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the USART DMA Half transfer complete callback */
    husart->hdmarx->XferHalfCpltCallback = USART_DMARxHalfCplt;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	4a37      	ldr	r2, [pc, #220]	; (80035ec <HAL_USART_Receive_DMA+0x154>)
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the USART DMA Rx transfer error callback */
    husart->hdmarx->XferErrorCallback = USART_DMAError;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	4a36      	ldr	r2, [pc, #216]	; (80035f0 <HAL_USART_Receive_DMA+0x158>)
 8003516:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    husart->hdmarx->XferAbortCallback = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	2200      	movs	r2, #0
 800351e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the USART Tx DMA transfer complete callback as NULL because the communication closing
    is performed in DMA reception complete callback  */
    husart->hdmatx->XferHalfCpltCallback = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	2200      	movs	r2, #0
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c
    husart->hdmatx->XferCpltCallback = NULL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    husart->hdmatx->XferErrorCallback = USART_DMAError;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_USART_Receive_DMA+0x158>)
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA AbortCpltCallback */
    husart->hdmatx->XferAbortCallback = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the USART receive DMA channel */
    tmp = (uint32_t *)&pRxData;
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(husart->hdmarx, (uint32_t)&husart->Instance->DR, *(uint32_t *)tmp, Size);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3304      	adds	r3, #4
 8003550:	4619      	mov	r1, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	f7fd fdf6 	bl	8001148 <HAL_DMA_Start_IT>

    /* Enable the USART transmit DMA channel: the transmit channel is used in order
       to generate in the non-blocking mode the clock to the slave device,
       this mode isn't a simplex receive mode but a full-duplex receive one */
    HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3304      	adds	r3, #4
 800356a:	461a      	mov	r2, r3
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	f7fd fdeb 	bl	8001148 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: mandatory for the second transfer */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (husart->Init.Parity != USART_PARITY_NONE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_USART_Receive_DMA+0x110>
    {
      /* Enable the USART Parity Error Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_USART_Receive_DMA+0x146>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	080036d5 	.word	0x080036d5
 80035ec:	0800377d 	.word	0x0800377d
 80035f0:	08003799 	.word	0x08003799

080035f4 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_USART_TxHalfCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_USART_RxHalfCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <USART_DMATransmitCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d119      	bne.n	800369e <USART_DMATransmitCplt+0x50>
  {
    husart->TxXferCount = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b12      	cmp	r3, #18
 800367a:	d119      	bne.n	80036b0 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368a:	615a      	str	r2, [r3, #20]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369a:	60da      	str	r2, [r3, #12]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 800369c:	e008      	b.n	80036b0 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b12      	cmp	r3, #18
 80036a8:	d102      	bne.n	80036b0 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ffa2 	bl	80035f4 <HAL_USART_TxCpltCallback>
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <USART_DMATxHalfCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff ff9d 	bl	8003606 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <USART_DMAReceiveCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d134      	bne.n	800375a <USART_DMAReceiveCplt+0x86>
  {
    husart->RxXferCount = 0x00U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003704:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the Transmit/receiver request by clearing the DMAT/DMAR bit
         in the USART CR3 register */
    CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003734:	615a      	str	r2, [r3, #20]

    /* The USART state is HAL_USART_STATE_BUSY_RX */
    if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b22      	cmp	r3, #34	; 0x22
 8003740:	d103      	bne.n	800374a <USART_DMAReceiveCplt+0x76>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7fc fe6c 	bl	8000420 <HAL_USART_RxCpltCallback>
 8003748:	e002      	b.n	8003750 <USART_DMAReceiveCplt+0x7c>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff ff6d 	bl	800362a <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
    husart->State = HAL_USART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8003758:	e00c      	b.n	8003774 <USART_DMAReceiveCplt+0xa0>
    if (husart->State == HAL_USART_STATE_BUSY_RX)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b22      	cmp	r3, #34	; 0x22
 8003764:	d103      	bne.n	800376e <USART_DMAReceiveCplt+0x9a>
      HAL_USART_RxCpltCallback(husart);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7fc fe5a 	bl	8000420 <HAL_USART_RxCpltCallback>
}
 800376c:	e002      	b.n	8003774 <USART_DMAReceiveCplt+0xa0>
      HAL_USART_TxRxCpltCallback(husart);
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff ff5b 	bl	800362a <HAL_USART_TxRxCpltCallback>
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <USART_DMARxHalfCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Rx Half Complete Callback */
  husart->RxHalfCpltCallback(husart);
#else
  /* Call legacy weak Rx Half Complete Callback */
  HAL_USART_RxHalfCpltCallback(husart);
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff ff44 	bl	8003618 <HAL_USART_RxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <USART_DMAError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	60bb      	str	r3, [r7, #8]
  husart->RxXferCount = 0x00U;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2200      	movs	r2, #0
 80037ae:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Stop USART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b12      	cmp	r3, #18
 80037d6:	d105      	bne.n	80037e4 <USART_DMAError+0x4c>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <USART_DMAError+0x4c>
  {
    USART_EndTxTransfer(husart);
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f000 f828 	bl	8003834 <USART_EndTxTransfer>
  }

  /* Stop USART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b22      	cmp	r3, #34	; 0x22
 8003804:	d105      	bne.n	8003812 <USART_DMAError+0x7a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <USART_DMAError+0x7a>
  {
    USART_EndRxTransfer(husart);
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f000 f826 	bl	800385e <USART_EndRxTransfer>
  }

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003826:	68b8      	ldr	r0, [r7, #8]
 8003828:	f7ff ff08 	bl	800363c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <USART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800384a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003874:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020c 	bic.w	r2, r2, #12
 80038b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80038cc:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038fa:	f023 030c 	bic.w	r3, r3, #12
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800392c:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a53      	ldr	r2, [pc, #332]	; (8003a80 <USART_SetConfig+0x1e8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d14f      	bne.n	80039d8 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7fe fb18 	bl	8001f6c <HAL_RCC_GetPCLK2Freq>
 800393c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <USART_SetConfig+0x1ec>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	0119      	lsls	r1, r3, #4
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f2f3 	udiv	r2, r2, r3
 8003974:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <USART_SetConfig+0x1ec>)
 8003976:	fba3 0302 	umull	r0, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	3332      	adds	r3, #50	; 0x32
 8003988:	4a3e      	ldr	r2, [pc, #248]	; (8003a84 <USART_SetConfig+0x1ec>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003996:	4419      	add	r1, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ae:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <USART_SetConfig+0x1ec>)
 80039b0:	fba3 0302 	umull	r0, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2064      	movs	r0, #100	; 0x64
 80039b8:	fb00 f303 	mul.w	r3, r0, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	3332      	adds	r3, #50	; 0x32
 80039c2:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <USART_SetConfig+0x1ec>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	440a      	add	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 80039d6:	e04e      	b.n	8003a76 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe fab4 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 80039dc:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <USART_SetConfig+0x1ec>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	0119      	lsls	r1, r3, #4
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009a      	lsls	r2, r3, #2
 8003a08:	441a      	add	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <USART_SetConfig+0x1ec>)
 8003a16:	fba3 0302 	umull	r0, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2064      	movs	r0, #100	; 0x64
 8003a1e:	fb00 f303 	mul.w	r3, r0, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	3332      	adds	r3, #50	; 0x32
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <USART_SetConfig+0x1ec>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003a36:	4419      	add	r1, r3
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <USART_SetConfig+0x1ec>)
 8003a50:	fba3 0302 	umull	r0, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2064      	movs	r0, #100	; 0x64
 8003a58:	fb00 f303 	mul.w	r3, r0, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <USART_SetConfig+0x1ec>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 020f 	and.w	r2, r3, #15
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	440a      	add	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40013800 	.word	0x40013800
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a9a:	2b84      	cmp	r3, #132	; 0x84
 8003a9c:	d005      	beq.n	8003aaa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3303      	adds	r3, #3
 8003aa8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003aba:	f000 fb4b 	bl	8004154 <vTaskStartScheduler>
  
  return osOK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <osThreadCreate+0x54>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01c      	beq.n	8003b18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685c      	ldr	r4, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691e      	ldr	r6, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ffc9 	bl	8003a88 <makeFreeRtosPriority>
 8003af6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b00:	9202      	str	r2, [sp, #8]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	9100      	str	r1, [sp, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 f8d4 	bl	8003cba <xTaskCreateStatic>
 8003b12:	4603      	mov	r3, r0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e01c      	b.n	8003b52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685c      	ldr	r4, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ffab 	bl	8003a88 <makeFreeRtosPriority>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	9200      	str	r2, [sp, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	4632      	mov	r2, r6
 8003b40:	4629      	mov	r1, r5
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f915 	bl	8003d72 <xTaskCreate>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f103 0208 	add.w	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f04f 32ff 	mov.w	r2, #4294967295
 8003b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f103 0208 	add.w	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f103 0208 	add.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d103      	bne.n	8003c18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e00c      	b.n	8003c32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e002      	b.n	8003c26 <vListInsert+0x2e>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d2f6      	bcs.n	8003c20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6852      	ldr	r2, [r2, #4]
 8003c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d103      	bne.n	8003c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1e5a      	subs	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08e      	sub	sp, #56	; 0x38
 8003cbe:	af04      	add	r7, sp, #16
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	61fb      	str	r3, [r7, #28]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d00:	23a0      	movs	r3, #160	; 0xa0
 8003d02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2ba0      	cmp	r3, #160	; 0xa0
 8003d08:	d00a      	beq.n	8003d20 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	61bb      	str	r3, [r7, #24]
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01e      	beq.n	8003d64 <xTaskCreateStatic+0xaa>
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	9302      	str	r3, [sp, #8]
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f850 	bl	8003dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d5e:	f000 f8e3 	bl	8003f28 <prvAddNewTaskToReadyList>
 8003d62:	e001      	b.n	8003d68 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d68:	697b      	ldr	r3, [r7, #20]
	}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b08c      	sub	sp, #48	; 0x30
 8003d76:	af04      	add	r7, sp, #16
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f830 	bl	8004dec <pvPortMalloc>
 8003d8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d94:	20a0      	movs	r0, #160	; 0xa0
 8003d96:	f001 f829 	bl	8004dec <pvPortMalloc>
 8003d9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
 8003da8:	e005      	b.n	8003db6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f001 f8e2 	bl	8004f74 <vPortFree>
 8003db0:	e001      	b.n	8003db6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d017      	beq.n	8003dec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9303      	str	r3, [sp, #12]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	9302      	str	r3, [sp, #8]
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f80e 	bl	8003dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003de0:	69f8      	ldr	r0, [r7, #28]
 8003de2:	f000 f8a1 	bl	8003f28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	e002      	b.n	8003df2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003df2:	69bb      	ldr	r3, [r7, #24]
	}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e14:	3b01      	subs	r3, #1
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f023 0307 	bic.w	r3, r3, #7
 8003e22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	617b      	str	r3, [r7, #20]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	e012      	b.n	8003e70 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	7819      	ldrb	r1, [r3, #0]
 8003e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	3334      	adds	r3, #52	; 0x34
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d9e9      	bls.n	8003e4a <prvInitialiseNewTask+0x4e>
 8003e76:	e000      	b.n	8003e7a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e78:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d901      	bls.n	8003e8c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e88:	2306      	movs	r3, #6
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fe79 	bl	8003b9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	3318      	adds	r3, #24
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fe74 	bl	8003b9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f1c3 0207 	rsb	r2, r3, #7
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	334c      	adds	r3, #76	; 0x4c
 8003edc:	224c      	movs	r2, #76	; 0x4c
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f95b 	bl	800519c <memset>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <prvInitialiseNewTask+0x120>)
 8003eea:	651a      	str	r2, [r3, #80]	; 0x50
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <prvInitialiseNewTask+0x124>)
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <prvInitialiseNewTask+0x128>)
 8003ef6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	69b8      	ldr	r0, [r7, #24]
 8003efe:	f000 fd81 	bl	8004a04 <pxPortInitialiseStack>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f14:	bf00      	nop
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20001328 	.word	0x20001328
 8003f20:	20001390 	.word	0x20001390
 8003f24:	200013f8 	.word	0x200013f8

08003f28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f30:	f000 fe5c 	bl	8004bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f34:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <prvAddNewTaskToReadyList+0xb8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <prvAddNewTaskToReadyList+0xb8>)
 8003f3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f3e:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <prvAddNewTaskToReadyList+0xbc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f46:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <prvAddNewTaskToReadyList+0xbc>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <prvAddNewTaskToReadyList+0xb8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d110      	bne.n	8003f76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f54:	f000 fb4a 	bl	80045ec <prvInitialiseTaskLists>
 8003f58:	e00d      	b.n	8003f76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <prvAddNewTaskToReadyList+0xc0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <prvAddNewTaskToReadyList+0xbc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d802      	bhi.n	8003f76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <prvAddNewTaskToReadyList+0xbc>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <prvAddNewTaskToReadyList+0xc4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <prvAddNewTaskToReadyList+0xc4>)
 8003f7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <prvAddNewTaskToReadyList+0xc8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <prvAddNewTaskToReadyList+0xc8>)
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <prvAddNewTaskToReadyList+0xcc>)
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f7ff fe02 	bl	8003bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fae:	f000 fe4d 	bl	8004c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <prvAddNewTaskToReadyList+0xc0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00e      	beq.n	8003fd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <prvAddNewTaskToReadyList+0xbc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvAddNewTaskToReadyList+0xd0>)
 8003fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200006dc 	.word	0x200006dc
 8003fe4:	200005dc 	.word	0x200005dc
 8003fe8:	200006e8 	.word	0x200006e8
 8003fec:	200006f8 	.word	0x200006f8
 8003ff0:	200006e4 	.word	0x200006e4
 8003ff4:	200005e0 	.word	0x200005e0
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60fb      	str	r3, [r7, #12]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <prvTaskIsTaskSuspended+0x6c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <prvTaskIsTaskSuspended+0x3a>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <prvTaskIsTaskSuspended+0x3c>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00f      	beq.n	800405c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <prvTaskIsTaskSuspended+0x70>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00a      	beq.n	800405c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <prvTaskIsTaskSuspended+0x56>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <prvTaskIsTaskSuspended+0x58>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800405c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800405e:	4618      	mov	r0, r3
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	200006c8 	.word	0x200006c8
 800406c:	2000069c 	.word	0x2000069c

08004070 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	61bb      	str	r3, [r7, #24]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800409c:	f000 fe68 	bl	8004d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040a0:	f3ef 8211 	mrs	r2, BASEPRI
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	617a      	str	r2, [r7, #20]
 80040b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040b8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040ba:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80040bc:	6a38      	ldr	r0, [r7, #32]
 80040be:	f7ff ff9d 	bl	8003ffc <prvTaskIsTaskSuspended>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d02f      	beq.n	8004128 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <xTaskResumeFromISR+0xd0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d125      	bne.n	800411c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <xTaskResumeFromISR+0xd4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	429a      	cmp	r2, r3
 80040dc:	d301      	bcc.n	80040e2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fdbe 	bl	8003c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	4b14      	ldr	r3, [pc, #80]	; (8004148 <xTaskResumeFromISR+0xd8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	4a13      	ldr	r2, [pc, #76]	; (8004148 <xTaskResumeFromISR+0xd8>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <xTaskResumeFromISR+0xdc>)
 800410c:	441a      	add	r2, r3
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7ff fd4c 	bl	8003bb2 <vListInsertEnd>
 800411a:	e005      	b.n	8004128 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	3318      	adds	r3, #24
 8004120:	4619      	mov	r1, r3
 8004122:	480b      	ldr	r0, [pc, #44]	; (8004150 <xTaskResumeFromISR+0xe0>)
 8004124:	f7ff fd45 	bl	8003bb2 <vListInsertEnd>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004132:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004136:	4618      	mov	r0, r3
 8004138:	3728      	adds	r7, #40	; 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000704 	.word	0x20000704
 8004144:	200005dc 	.word	0x200005dc
 8004148:	200006e4 	.word	0x200006e4
 800414c:	200005e0 	.word	0x200005e0
 8004150:	2000069c 	.word	0x2000069c

08004154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004162:	463a      	mov	r2, r7
 8004164:	1d39      	adds	r1, r7, #4
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f7fb fff0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	9202      	str	r2, [sp, #8]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	460a      	mov	r2, r1
 8004182:	4921      	ldr	r1, [pc, #132]	; (8004208 <vTaskStartScheduler+0xb4>)
 8004184:	4821      	ldr	r0, [pc, #132]	; (800420c <vTaskStartScheduler+0xb8>)
 8004186:	f7ff fd98 	bl	8003cba <xTaskCreateStatic>
 800418a:	4603      	mov	r3, r0
 800418c:	4a20      	ldr	r2, [pc, #128]	; (8004210 <vTaskStartScheduler+0xbc>)
 800418e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <vTaskStartScheduler+0xbc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e001      	b.n	80041a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11b      	bne.n	80041e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	613b      	str	r3, [r7, #16]
}
 80041ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <vTaskStartScheduler+0xc0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	334c      	adds	r3, #76	; 0x4c
 80041c2:	4a15      	ldr	r2, [pc, #84]	; (8004218 <vTaskStartScheduler+0xc4>)
 80041c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <vTaskStartScheduler+0xc8>)
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <vTaskStartScheduler+0xcc>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <vTaskStartScheduler+0xd0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041da:	f000 fc95 	bl	8004b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041de:	e00e      	b.n	80041fe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d10a      	bne.n	80041fe <vTaskStartScheduler+0xaa>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <vTaskStartScheduler+0xa8>
}
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	080053dc 	.word	0x080053dc
 800420c:	080045bd 	.word	0x080045bd
 8004210:	20000700 	.word	0x20000700
 8004214:	200005dc 	.word	0x200005dc
 8004218:	2000005c 	.word	0x2000005c
 800421c:	200006fc 	.word	0x200006fc
 8004220:	200006e8 	.word	0x200006e8
 8004224:	200006e0 	.word	0x200006e0

08004228 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <vTaskSuspendAll+0x18>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	4a03      	ldr	r2, [pc, #12]	; (8004240 <vTaskSuspendAll+0x18>)
 8004234:	6013      	str	r3, [r2, #0]
}
 8004236:	bf00      	nop
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000704 	.word	0x20000704

08004244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <xTaskResumeAll+0x114>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <xTaskResumeAll+0x2c>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	603b      	str	r3, [r7, #0]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004270:	f000 fcbc 	bl	8004bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004274:	4b38      	ldr	r3, [pc, #224]	; (8004358 <xTaskResumeAll+0x114>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3b01      	subs	r3, #1
 800427a:	4a37      	ldr	r2, [pc, #220]	; (8004358 <xTaskResumeAll+0x114>)
 800427c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427e:	4b36      	ldr	r3, [pc, #216]	; (8004358 <xTaskResumeAll+0x114>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d161      	bne.n	800434a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004286:	4b35      	ldr	r3, [pc, #212]	; (800435c <xTaskResumeAll+0x118>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d05d      	beq.n	800434a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800428e:	e02e      	b.n	80042ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004290:	4b33      	ldr	r3, [pc, #204]	; (8004360 <xTaskResumeAll+0x11c>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3318      	adds	r3, #24
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fce3 	bl	8003c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fcde 	bl	8003c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	2201      	movs	r2, #1
 80042b2:	409a      	lsls	r2, r3
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <xTaskResumeAll+0x120>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <xTaskResumeAll+0x120>)
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4a27      	ldr	r2, [pc, #156]	; (8004368 <xTaskResumeAll+0x124>)
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7ff fc6c 	bl	8003bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <xTaskResumeAll+0x128>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <xTaskResumeAll+0x12c>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <xTaskResumeAll+0x11c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cc      	bne.n	8004290 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042fc:	f000 fa18 	bl	8004730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xTaskResumeAll+0x130>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d010      	beq.n	800432e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800430c:	f000 f836 	bl	800437c <xTaskIncrementTick>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <xTaskResumeAll+0x12c>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f1      	bne.n	800430c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <xTaskResumeAll+0x130>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <xTaskResumeAll+0x12c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <xTaskResumeAll+0x134>)
 800433c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f000 fc7f 	bl	8004c4c <vPortExitCritical>

	return xAlreadyYielded;
 800434e:	68bb      	ldr	r3, [r7, #8]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000704 	.word	0x20000704
 800435c:	200006dc 	.word	0x200006dc
 8004360:	2000069c 	.word	0x2000069c
 8004364:	200006e4 	.word	0x200006e4
 8004368:	200005e0 	.word	0x200005e0
 800436c:	200005dc 	.word	0x200005dc
 8004370:	200006f0 	.word	0x200006f0
 8004374:	200006ec 	.word	0x200006ec
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <xTaskIncrementTick+0x150>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 808d 	bne.w	80044aa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004390:	4b4f      	ldr	r3, [pc, #316]	; (80044d0 <xTaskIncrementTick+0x154>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004398:	4a4d      	ldr	r2, [pc, #308]	; (80044d0 <xTaskIncrementTick+0x154>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d120      	bne.n	80043e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043a4:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <xTaskIncrementTick+0x158>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	603b      	str	r3, [r7, #0]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xTaskIncrementTick+0x46>
 80043c4:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <xTaskIncrementTick+0x158>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <xTaskIncrementTick+0x15c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a41      	ldr	r2, [pc, #260]	; (80044d4 <xTaskIncrementTick+0x158>)
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4a41      	ldr	r2, [pc, #260]	; (80044d8 <xTaskIncrementTick+0x15c>)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b40      	ldr	r3, [pc, #256]	; (80044dc <xTaskIncrementTick+0x160>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	4a3f      	ldr	r2, [pc, #252]	; (80044dc <xTaskIncrementTick+0x160>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	f000 f9a5 	bl	8004730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043e6:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <xTaskIncrementTick+0x164>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d34d      	bcc.n	800448c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f0:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <xTaskIncrementTick+0x158>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <xTaskIncrementTick+0x82>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xTaskIncrementTick+0x84>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <xTaskIncrementTick+0x164>)
 8004406:	f04f 32ff 	mov.w	r2, #4294967295
 800440a:	601a      	str	r2, [r3, #0]
					break;
 800440c:	e03e      	b.n	800448c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <xTaskIncrementTick+0x158>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	d203      	bcs.n	800442e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004426:	4a2e      	ldr	r2, [pc, #184]	; (80044e0 <xTaskIncrementTick+0x164>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6013      	str	r3, [r2, #0]
						break;
 800442c:	e02e      	b.n	800448c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3304      	adds	r3, #4
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fc18 	bl	8003c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3318      	adds	r3, #24
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fc0f 	bl	8003c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	2201      	movs	r2, #1
 8004450:	409a      	lsls	r2, r3
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <xTaskIncrementTick+0x168>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <xTaskIncrementTick+0x168>)
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <xTaskIncrementTick+0x16c>)
 800446a:	441a      	add	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f7ff fb9d 	bl	8003bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <xTaskIncrementTick+0x170>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d3b4      	bcc.n	80043f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448a:	e7b1      	b.n	80043f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <xTaskIncrementTick+0x170>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004492:	4915      	ldr	r1, [pc, #84]	; (80044e8 <xTaskIncrementTick+0x16c>)
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d907      	bls.n	80044b4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e004      	b.n	80044b4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <xTaskIncrementTick+0x174>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	4a0f      	ldr	r2, [pc, #60]	; (80044f0 <xTaskIncrementTick+0x174>)
 80044b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044b4:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <xTaskIncrementTick+0x178>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044c0:	697b      	ldr	r3, [r7, #20]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000704 	.word	0x20000704
 80044d0:	200006e0 	.word	0x200006e0
 80044d4:	20000694 	.word	0x20000694
 80044d8:	20000698 	.word	0x20000698
 80044dc:	200006f4 	.word	0x200006f4
 80044e0:	200006fc 	.word	0x200006fc
 80044e4:	200006e4 	.word	0x200006e4
 80044e8:	200005e0 	.word	0x200005e0
 80044ec:	200005dc 	.word	0x200005dc
 80044f0:	200006ec 	.word	0x200006ec
 80044f4:	200006f0 	.word	0x200006f0

080044f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <vTaskSwitchContext+0xac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <vTaskSwitchContext+0xb0>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800450c:	e044      	b.n	8004598 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <vTaskSwitchContext+0xb0>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <vTaskSwitchContext+0xb4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	f1c3 031f 	rsb	r3, r3, #31
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	4921      	ldr	r1, [pc, #132]	; (80045b0 <vTaskSwitchContext+0xb8>)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <vTaskSwitchContext+0x5c>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <vTaskSwitchContext+0x5a>
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <vTaskSwitchContext+0xb8>)
 8004560:	4413      	add	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3308      	adds	r3, #8
 8004576:	429a      	cmp	r2, r3
 8004578:	d104      	bne.n	8004584 <vTaskSwitchContext+0x8c>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <vTaskSwitchContext+0xbc>)
 800458c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <vTaskSwitchContext+0xbc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	334c      	adds	r3, #76	; 0x4c
 8004594:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <vTaskSwitchContext+0xc0>)
 8004596:	6013      	str	r3, [r2, #0]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000704 	.word	0x20000704
 80045a8:	200006f0 	.word	0x200006f0
 80045ac:	200006e4 	.word	0x200006e4
 80045b0:	200005e0 	.word	0x200005e0
 80045b4:	200005dc 	.word	0x200005dc
 80045b8:	2000005c 	.word	0x2000005c

080045bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045c4:	f000 f852 	bl	800466c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <prvIdleTask+0x28>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d9f9      	bls.n	80045c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <prvIdleTask+0x2c>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045e0:	e7f0      	b.n	80045c4 <prvIdleTask+0x8>
 80045e2:	bf00      	nop
 80045e4:	200005e0 	.word	0x200005e0
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	e00c      	b.n	8004612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4a12      	ldr	r2, [pc, #72]	; (800464c <prvInitialiseTaskLists+0x60>)
 8004604:	4413      	add	r3, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff faa8 	bl	8003b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3301      	adds	r3, #1
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b06      	cmp	r3, #6
 8004616:	d9ef      	bls.n	80045f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004618:	480d      	ldr	r0, [pc, #52]	; (8004650 <prvInitialiseTaskLists+0x64>)
 800461a:	f7ff fa9f 	bl	8003b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800461e:	480d      	ldr	r0, [pc, #52]	; (8004654 <prvInitialiseTaskLists+0x68>)
 8004620:	f7ff fa9c 	bl	8003b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004624:	480c      	ldr	r0, [pc, #48]	; (8004658 <prvInitialiseTaskLists+0x6c>)
 8004626:	f7ff fa99 	bl	8003b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800462a:	480c      	ldr	r0, [pc, #48]	; (800465c <prvInitialiseTaskLists+0x70>)
 800462c:	f7ff fa96 	bl	8003b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004630:	480b      	ldr	r0, [pc, #44]	; (8004660 <prvInitialiseTaskLists+0x74>)
 8004632:	f7ff fa93 	bl	8003b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <prvInitialiseTaskLists+0x78>)
 8004638:	4a05      	ldr	r2, [pc, #20]	; (8004650 <prvInitialiseTaskLists+0x64>)
 800463a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <prvInitialiseTaskLists+0x7c>)
 800463e:	4a05      	ldr	r2, [pc, #20]	; (8004654 <prvInitialiseTaskLists+0x68>)
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	200005e0 	.word	0x200005e0
 8004650:	2000066c 	.word	0x2000066c
 8004654:	20000680 	.word	0x20000680
 8004658:	2000069c 	.word	0x2000069c
 800465c:	200006b0 	.word	0x200006b0
 8004660:	200006c8 	.word	0x200006c8
 8004664:	20000694 	.word	0x20000694
 8004668:	20000698 	.word	0x20000698

0800466c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004672:	e019      	b.n	80046a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004674:	f000 faba 	bl	8004bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <prvCheckTasksWaitingTermination+0x50>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff faef 	bl	8003c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <prvCheckTasksWaitingTermination+0x54>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <prvCheckTasksWaitingTermination+0x54>)
 8004692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <prvCheckTasksWaitingTermination+0x58>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3b01      	subs	r3, #1
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <prvCheckTasksWaitingTermination+0x58>)
 800469c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800469e:	f000 fad5 	bl	8004c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f810 	bl	80046c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <prvCheckTasksWaitingTermination+0x58>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e1      	bne.n	8004674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200006b0 	.word	0x200006b0
 80046c0:	200006dc 	.word	0x200006dc
 80046c4:	200006c4 	.word	0x200006c4

080046c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	334c      	adds	r3, #76	; 0x4c
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd69 	bl	80051ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d108      	bne.n	80046f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fc43 	bl	8004f74 <vPortFree>
				vPortFree( pxTCB );
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fc40 	bl	8004f74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046f4:	e018      	b.n	8004728 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d103      	bne.n	8004708 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fc37 	bl	8004f74 <vPortFree>
	}
 8004706:	e00f      	b.n	8004728 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800470e:	2b02      	cmp	r3, #2
 8004710:	d00a      	beq.n	8004728 <prvDeleteTCB+0x60>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60fb      	str	r3, [r7, #12]
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <prvDeleteTCB+0x5e>
	}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <prvResetNextTaskUnblockTime+0x40>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <prvResetNextTaskUnblockTime+0x14>
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <prvResetNextTaskUnblockTime+0x16>
 8004744:	2300      	movs	r3, #0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <prvResetNextTaskUnblockTime+0x44>)
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004752:	e008      	b.n	8004766 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <prvResetNextTaskUnblockTime+0x40>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <prvResetNextTaskUnblockTime+0x44>)
 8004764:	6013      	str	r3, [r2, #0]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	20000694 	.word	0x20000694
 8004774:	200006fc 	.word	0x200006fc

08004778 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004782:	f000 fa33 	bl	8004bec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <ulTaskNotifyTake+0x90>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478e:	2b00      	cmp	r3, #0
 8004790:	d113      	bne.n	80047ba <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <ulTaskNotifyTake+0x90>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047a2:	2101      	movs	r1, #1
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	f000 f8c7 	bl	8004938 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80047aa:	4b18      	ldr	r3, [pc, #96]	; (800480c <ulTaskNotifyTake+0x94>)
 80047ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80047ba:	f000 fa47 	bl	8004c4c <vPortExitCritical>

		taskENTER_CRITICAL();
 80047be:	f000 fa15 	bl	8004bec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <ulTaskNotifyTake+0x90>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ca:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <ulTaskNotifyTake+0x90>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80047e2:	e005      	b.n	80047f0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <ulTaskNotifyTake+0x90>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	3a01      	subs	r2, #1
 80047ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <ulTaskNotifyTake+0x90>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 80047fa:	f000 fa27 	bl	8004c4c <vPortExitCritical>

		return ulReturn;
 80047fe:	68fb      	ldr	r3, [r7, #12]
	}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	200005dc 	.word	0x200005dc
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61bb      	str	r3, [r7, #24]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004836:	f000 fa9b 	bl	8004d70 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800483e:	f3ef 8211 	mrs	r2, BASEPRI
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	617a      	str	r2, [r7, #20]
 8004854:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004856:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004858:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004860:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2202      	movs	r2, #2
 8004866:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d146      	bne.n	800490c <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60fb      	str	r3, [r7, #12]
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <vTaskNotifyGiveFromISR+0x110>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11c      	bne.n	80048de <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	3304      	adds	r3, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff f9dd 	bl	8003c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <vTaskNotifyGiveFromISR+0x114>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <vTaskNotifyGiveFromISR+0x114>)
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <vTaskNotifyGiveFromISR+0x118>)
 80048ce:	441a      	add	r2, r3
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f7ff f96b 	bl	8003bb2 <vListInsertEnd>
 80048dc:	e005      	b.n	80048ea <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	3318      	adds	r3, #24
 80048e2:	4619      	mov	r1, r3
 80048e4:	4811      	ldr	r0, [pc, #68]	; (800492c <vTaskNotifyGiveFromISR+0x11c>)
 80048e6:	f7ff f964 	bl	8003bb2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <vTaskNotifyGiveFromISR+0x120>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d909      	bls.n	800490c <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e002      	b.n	800490c <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vTaskNotifyGiveFromISR+0x124>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f383 8811 	msr	BASEPRI, r3
}
 8004916:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8004918:	bf00      	nop
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000704 	.word	0x20000704
 8004924:	200006e4 	.word	0x200006e4
 8004928:	200005e0 	.word	0x200005e0
 800492c:	2000069c 	.word	0x2000069c
 8004930:	200005dc 	.word	0x200005dc
 8004934:	200006f0 	.word	0x200006f0

08004938 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3304      	adds	r3, #4
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff f98a 	bl	8003c68 <uxListRemove>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800495a:	4b24      	ldr	r3, [pc, #144]	; (80049ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	2201      	movs	r2, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43da      	mvns	r2, r3
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4013      	ands	r3, r2
 800496e:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004970:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d10a      	bne.n	8004990 <prvAddCurrentTaskToDelayedList+0x58>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	481a      	ldr	r0, [pc, #104]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800498a:	f7ff f912 	bl	8003bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800498e:	e026      	b.n	80049de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d209      	bcs.n	80049bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7ff f91f 	bl	8003bf8 <vListInsert>
}
 80049ba:	e010      	b.n	80049de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7ff f915 	bl	8003bf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d202      	bcs.n	80049de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6013      	str	r3, [r2, #0]
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200006e0 	.word	0x200006e0
 80049ec:	200005dc 	.word	0x200005dc
 80049f0:	200006e4 	.word	0x200006e4
 80049f4:	200006c8 	.word	0x200006c8
 80049f8:	20000698 	.word	0x20000698
 80049fc:	20000694 	.word	0x20000694
 8004a00:	200006fc 	.word	0x200006fc

08004a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3b04      	subs	r3, #4
 8004a14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b04      	subs	r3, #4
 8004a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a34:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <pxPortInitialiseStack+0x54>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b14      	subs	r3, #20
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b20      	subs	r3, #32
 8004a4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	08004a5d 	.word	0x08004a5d

08004a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <prvTaskExitError+0x54>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d00a      	beq.n	8004a86 <prvTaskExitError+0x2a>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60fb      	str	r3, [r7, #12]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <prvTaskExitError+0x28>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60bb      	str	r3, [r7, #8]
}
 8004a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a9a:	bf00      	nop
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0fc      	beq.n	8004a9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	2000000c 	.word	0x2000000c
	...

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ade:	4770      	bx	lr

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ae8:	4806      	ldr	r0, [pc, #24]	; (8004b04 <prvPortStartFirstTask+0x1c>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	b662      	cpsie	i
 8004af4:	b661      	cpsie	f
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	df00      	svc	0
 8004b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b02:	bf00      	nop
 8004b04:	e000ed08 	.word	0xe000ed08

08004b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b0e:	4b32      	ldr	r3, [pc, #200]	; (8004bd8 <xPortStartScheduler+0xd0>)
 8004b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <xPortStartScheduler+0xd4>)
 8004b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b38:	2207      	movs	r2, #7
 8004b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b3c:	e009      	b.n	8004b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d0ef      	beq.n	8004b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1c3 0307 	rsb	r3, r3, #7
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d00a      	beq.n	8004b80 <xPortStartScheduler+0x78>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <xPortStartScheduler+0xd8>)
 8004b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <xPortStartScheduler+0xdc>)
 8004bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bb6:	f000 f8b9 	bl	8004d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <xPortStartScheduler+0xe0>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bc0:	f7ff ff92 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bc4:	f7ff fc98 	bl	80044f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004bc8:	f7ff ff48 	bl	8004a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	e000e400 	.word	0xe000e400
 8004bdc:	20000708 	.word	0x20000708
 8004be0:	2000070c 	.word	0x2000070c
 8004be4:	e000ed20 	.word	0xe000ed20
 8004be8:	2000000c 	.word	0x2000000c

08004bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	607b      	str	r3, [r7, #4]
}
 8004c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <vPortEnterCritical+0x58>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <vPortEnterCritical+0x58>)
 8004c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <vPortEnterCritical+0x58>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10f      	bne.n	8004c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <vPortEnterCritical+0x5c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	603b      	str	r3, [r7, #0]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortEnterCritical+0x4a>
	}
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <vPortExitCritical+0x24>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <vPortExitCritical+0x4c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <vPortExitCritical+0x42>
 8004c82:	2300      	movs	r3, #0
 8004c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f383 8811 	msr	BASEPRI, r3
}
 8004c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	2000000c 	.word	0x2000000c
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cb0:	6010      	str	r0, [r2, #0]
 8004cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cba:	f380 8811 	msr	BASEPRI, r0
 8004cbe:	f7ff fc1b 	bl	80044f8 <vTaskSwitchContext>
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8811 	msr	BASEPRI, r0
 8004cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6808      	ldr	r0, [r1, #0]
 8004cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cd6:	f380 8809 	msr	PSP, r0
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	4770      	bx	lr

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
}
 8004d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d02:	f7ff fb3b 	bl	800437c <xTaskIncrementTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <SysTick_Handler+0x40>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
}
 8004d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <vPortSetupTimerInterrupt+0x30>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <vPortSetupTimerInterrupt+0x38>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <vPortSetupTimerInterrupt+0x3c>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <vPortSetupTimerInterrupt+0x40>)
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <vPortSetupTimerInterrupt+0x30>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	e000e010 	.word	0xe000e010
 8004d60:	e000e018 	.word	0xe000e018
 8004d64:	20000000 	.word	0x20000000
 8004d68:	10624dd3 	.word	0x10624dd3
 8004d6c:	e000e014 	.word	0xe000e014

08004d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d76:	f3ef 8305 	mrs	r3, IPSR
 8004d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b0f      	cmp	r3, #15
 8004d80:	d914      	bls.n	8004dac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d82:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <vPortValidateInterruptPriority+0x6c>)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <vPortValidateInterruptPriority+0x70>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	7afa      	ldrb	r2, [r7, #11]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20a      	bcs.n	8004dac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	607b      	str	r3, [r7, #4]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <vPortValidateInterruptPriority+0x74>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <vPortValidateInterruptPriority+0x78>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d90a      	bls.n	8004dd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	603b      	str	r3, [r7, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <vPortValidateInterruptPriority+0x60>
	}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	e000e3f0 	.word	0xe000e3f0
 8004de0:	20000708 	.word	0x20000708
 8004de4:	e000ed0c 	.word	0xe000ed0c
 8004de8:	2000070c 	.word	0x2000070c

08004dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004df8:	f7ff fa16 	bl	8004228 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dfc:	4b58      	ldr	r3, [pc, #352]	; (8004f60 <pvPortMalloc+0x174>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e04:	f000 f910 	bl	8005028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e08:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <pvPortMalloc+0x178>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f040 808e 	bne.w	8004f32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01d      	beq.n	8004e58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d014      	beq.n	8004e58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f023 0307 	bic.w	r3, r3, #7
 8004e34:	3308      	adds	r3, #8
 8004e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <pvPortMalloc+0x6c>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	617b      	str	r3, [r7, #20]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d069      	beq.n	8004f32 <pvPortMalloc+0x146>
 8004e5e:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <pvPortMalloc+0x17c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d864      	bhi.n	8004f32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <pvPortMalloc+0x180>)
 8004e6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e6c:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <pvPortMalloc+0x180>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e72:	e004      	b.n	8004e7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d903      	bls.n	8004e90 <pvPortMalloc+0xa4>
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f1      	bne.n	8004e74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e90:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <pvPortMalloc+0x174>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d04b      	beq.n	8004f32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	4413      	add	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d91f      	bls.n	8004efc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <pvPortMalloc+0xf8>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	613b      	str	r3, [r7, #16]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ef6:	69b8      	ldr	r0, [r7, #24]
 8004ef8:	f000 f8f8 	bl	80050ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004efc:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <pvPortMalloc+0x17c>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <pvPortMalloc+0x17c>)
 8004f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <pvPortMalloc+0x17c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <pvPortMalloc+0x184>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d203      	bcs.n	8004f1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <pvPortMalloc+0x17c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <pvPortMalloc+0x184>)
 8004f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <pvPortMalloc+0x178>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f32:	f7ff f987 	bl	8004244 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <pvPortMalloc+0x16a>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <pvPortMalloc+0x168>
	return pvReturn;
 8004f56:	69fb      	ldr	r3, [r7, #28]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	; 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20001318 	.word	0x20001318
 8004f64:	20001324 	.word	0x20001324
 8004f68:	2000131c 	.word	0x2000131c
 8004f6c:	20001310 	.word	0x20001310
 8004f70:	20001320 	.word	0x20001320

08004f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d048      	beq.n	8005018 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f86:	2308      	movs	r3, #8
 8004f88:	425b      	negs	r3, r3
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <vPortFree+0xac>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <vPortFree+0x44>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <vPortFree+0x62>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60bb      	str	r3, [r7, #8]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <vPortFree+0xac>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d019      	beq.n	8005018 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d115      	bne.n	8005018 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <vPortFree+0xac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ffc:	f7ff f914 	bl	8004228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <vPortFree+0xb0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4413      	add	r3, r2
 800500a:	4a06      	ldr	r2, [pc, #24]	; (8005024 <vPortFree+0xb0>)
 800500c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f000 f86c 	bl	80050ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005014:	f7ff f916 	bl	8004244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20001324 	.word	0x20001324
 8005024:	2000131c 	.word	0x2000131c

08005028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800502e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005034:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <prvHeapInit+0xac>)
 8005036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3307      	adds	r3, #7
 8005046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0307 	bic.w	r3, r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <prvHeapInit+0xac>)
 8005058:	4413      	add	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <prvHeapInit+0xb0>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005066:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <prvHeapInit+0xb0>)
 8005068:	2200      	movs	r2, #0
 800506a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4413      	add	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005074:	2208      	movs	r2, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <prvHeapInit+0xb4>)
 8005088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800508a:	4b14      	ldr	r3, [pc, #80]	; (80050dc <prvHeapInit+0xb4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <prvHeapInit+0xb4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	1ad2      	subs	r2, r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <prvHeapInit+0xb4>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <prvHeapInit+0xb8>)
 80050b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <prvHeapInit+0xbc>)
 80050be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <prvHeapInit+0xc0>)
 80050c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050c6:	601a      	str	r2, [r3, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000710 	.word	0x20000710
 80050d8:	20001310 	.word	0x20001310
 80050dc:	20001318 	.word	0x20001318
 80050e0:	20001320 	.word	0x20001320
 80050e4:	2000131c 	.word	0x2000131c
 80050e8:	20001324 	.word	0x20001324

080050ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <prvInsertBlockIntoFreeList+0xa8>)
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e002      	b.n	8005100 <prvInsertBlockIntoFreeList+0x14>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d8f7      	bhi.n	80050fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4413      	add	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	d108      	bne.n	800512e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	441a      	add	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d118      	bne.n	8005174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <prvInsertBlockIntoFreeList+0xac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d00d      	beq.n	800516a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e008      	b.n	800517c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <prvInsertBlockIntoFreeList+0xac>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e003      	b.n	800517c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d002      	beq.n	800518a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr
 8005194:	20001310 	.word	0x20001310
 8005198:	20001318 	.word	0x20001318

0800519c <memset>:
 800519c:	4603      	mov	r3, r0
 800519e:	4402      	add	r2, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <_reclaim_reent>:
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <_reclaim_reent+0xa8>)
 80051ae:	b570      	push	{r4, r5, r6, lr}
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4604      	mov	r4, r0
 80051b4:	4283      	cmp	r3, r0
 80051b6:	d04b      	beq.n	8005250 <_reclaim_reent+0xa4>
 80051b8:	69c3      	ldr	r3, [r0, #28]
 80051ba:	b143      	cbz	r3, 80051ce <_reclaim_reent+0x22>
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d144      	bne.n	800524c <_reclaim_reent+0xa0>
 80051c2:	69e3      	ldr	r3, [r4, #28]
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	b111      	cbz	r1, 80051ce <_reclaim_reent+0x22>
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 f86b 	bl	80052a4 <_free_r>
 80051ce:	6961      	ldr	r1, [r4, #20]
 80051d0:	b111      	cbz	r1, 80051d8 <_reclaim_reent+0x2c>
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f866 	bl	80052a4 <_free_r>
 80051d8:	69e1      	ldr	r1, [r4, #28]
 80051da:	b111      	cbz	r1, 80051e2 <_reclaim_reent+0x36>
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f861 	bl	80052a4 <_free_r>
 80051e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80051e4:	b111      	cbz	r1, 80051ec <_reclaim_reent+0x40>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f85c 	bl	80052a4 <_free_r>
 80051ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ee:	b111      	cbz	r1, 80051f6 <_reclaim_reent+0x4a>
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 f857 	bl	80052a4 <_free_r>
 80051f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051f8:	b111      	cbz	r1, 8005200 <_reclaim_reent+0x54>
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f852 	bl	80052a4 <_free_r>
 8005200:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005202:	b111      	cbz	r1, 800520a <_reclaim_reent+0x5e>
 8005204:	4620      	mov	r0, r4
 8005206:	f000 f84d 	bl	80052a4 <_free_r>
 800520a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800520c:	b111      	cbz	r1, 8005214 <_reclaim_reent+0x68>
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f848 	bl	80052a4 <_free_r>
 8005214:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005216:	b111      	cbz	r1, 800521e <_reclaim_reent+0x72>
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f843 	bl	80052a4 <_free_r>
 800521e:	6a23      	ldr	r3, [r4, #32]
 8005220:	b1b3      	cbz	r3, 8005250 <_reclaim_reent+0xa4>
 8005222:	4620      	mov	r0, r4
 8005224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005228:	4718      	bx	r3
 800522a:	5949      	ldr	r1, [r1, r5]
 800522c:	b941      	cbnz	r1, 8005240 <_reclaim_reent+0x94>
 800522e:	3504      	adds	r5, #4
 8005230:	69e3      	ldr	r3, [r4, #28]
 8005232:	2d80      	cmp	r5, #128	; 0x80
 8005234:	68d9      	ldr	r1, [r3, #12]
 8005236:	d1f8      	bne.n	800522a <_reclaim_reent+0x7e>
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f833 	bl	80052a4 <_free_r>
 800523e:	e7c0      	b.n	80051c2 <_reclaim_reent+0x16>
 8005240:	680e      	ldr	r6, [r1, #0]
 8005242:	4620      	mov	r0, r4
 8005244:	f000 f82e 	bl	80052a4 <_free_r>
 8005248:	4631      	mov	r1, r6
 800524a:	e7ef      	b.n	800522c <_reclaim_reent+0x80>
 800524c:	2500      	movs	r5, #0
 800524e:	e7ef      	b.n	8005230 <_reclaim_reent+0x84>
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	bf00      	nop
 8005254:	2000005c 	.word	0x2000005c

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	2600      	movs	r6, #0
 800525c:	4d0c      	ldr	r5, [pc, #48]	; (8005290 <__libc_init_array+0x38>)
 800525e:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	f000 f870 	bl	800534c <_init>
 800526c:	2600      	movs	r6, #0
 800526e:	4d0a      	ldr	r5, [pc, #40]	; (8005298 <__libc_init_array+0x40>)
 8005270:	4c0a      	ldr	r4, [pc, #40]	; (800529c <__libc_init_array+0x44>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	08005410 	.word	0x08005410
 8005294:	08005410 	.word	0x08005410
 8005298:	08005410 	.word	0x08005410
 800529c:	08005414 	.word	0x08005414

080052a0 <__retarget_lock_acquire_recursive>:
 80052a0:	4770      	bx	lr

080052a2 <__retarget_lock_release_recursive>:
 80052a2:	4770      	bx	lr

080052a4 <_free_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4605      	mov	r5, r0
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d040      	beq.n	800532e <_free_r+0x8a>
 80052ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b0:	1f0c      	subs	r4, r1, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bfb8      	it	lt
 80052b6:	18e4      	addlt	r4, r4, r3
 80052b8:	f000 f83c 	bl	8005334 <__malloc_lock>
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <_free_r+0x8c>)
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	b933      	cbnz	r3, 80052d0 <_free_r+0x2c>
 80052c2:	6063      	str	r3, [r4, #4]
 80052c4:	6014      	str	r4, [r2, #0]
 80052c6:	4628      	mov	r0, r5
 80052c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052cc:	f000 b838 	b.w	8005340 <__malloc_unlock>
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	d908      	bls.n	80052e6 <_free_r+0x42>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	1821      	adds	r1, r4, r0
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf01      	itttt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	1809      	addeq	r1, r1, r0
 80052e2:	6021      	streq	r1, [r4, #0]
 80052e4:	e7ed      	b.n	80052c2 <_free_r+0x1e>
 80052e6:	461a      	mov	r2, r3
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b10b      	cbz	r3, 80052f0 <_free_r+0x4c>
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d9fa      	bls.n	80052e6 <_free_r+0x42>
 80052f0:	6811      	ldr	r1, [r2, #0]
 80052f2:	1850      	adds	r0, r2, r1
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	d10b      	bne.n	8005310 <_free_r+0x6c>
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	4401      	add	r1, r0
 80052fc:	1850      	adds	r0, r2, r1
 80052fe:	4283      	cmp	r3, r0
 8005300:	6011      	str	r1, [r2, #0]
 8005302:	d1e0      	bne.n	80052c6 <_free_r+0x22>
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4408      	add	r0, r1
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	6053      	str	r3, [r2, #4]
 800530e:	e7da      	b.n	80052c6 <_free_r+0x22>
 8005310:	d902      	bls.n	8005318 <_free_r+0x74>
 8005312:	230c      	movs	r3, #12
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	e7d6      	b.n	80052c6 <_free_r+0x22>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	1821      	adds	r1, r4, r0
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	6054      	str	r4, [r2, #4]
 800532c:	e7cb      	b.n	80052c6 <_free_r+0x22>
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20001464 	.word	0x20001464

08005334 <__malloc_lock>:
 8005334:	4801      	ldr	r0, [pc, #4]	; (800533c <__malloc_lock+0x8>)
 8005336:	f7ff bfb3 	b.w	80052a0 <__retarget_lock_acquire_recursive>
 800533a:	bf00      	nop
 800533c:	20001460 	.word	0x20001460

08005340 <__malloc_unlock>:
 8005340:	4801      	ldr	r0, [pc, #4]	; (8005348 <__malloc_unlock+0x8>)
 8005342:	f7ff bfae 	b.w	80052a2 <__retarget_lock_release_recursive>
 8005346:	bf00      	nop
 8005348:	20001460 	.word	0x20001460

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
