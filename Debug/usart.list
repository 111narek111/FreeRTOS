
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005270  08005270  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005270  08005270  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  20000060  080052d8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001468  080052d8  00021468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c31  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311b  00000000  00000000  00032cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  00037110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193d0  00000000  00000000  00037fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145e9  00000000  00000000  0005137d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093af4  00000000  00000000  00065966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000516c  00000000  00000000  000f945c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fe5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080051ac 	.word	0x080051ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080051ac 	.word	0x080051ac

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000184:	f3bf 8f4f 	dsb	sy
}
 8000188:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800018a:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <__NVIC_SystemReset+0x24>)
 800018c:	68db      	ldr	r3, [r3, #12]
 800018e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000192:	4904      	ldr	r1, [pc, #16]	; (80001a4 <__NVIC_SystemReset+0x24>)
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__NVIC_SystemReset+0x28>)
 8000196:	4313      	orrs	r3, r2
 8000198:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800019a:	f3bf 8f4f 	dsb	sy
}
 800019e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80001a0:	bf00      	nop
 80001a2:	e7fd      	b.n	80001a0 <__NVIC_SystemReset+0x20>
 80001a4:	e000ed00 	.word	0xe000ed00
 80001a8:	05fa0004 	.word	0x05fa0004

080001ac <main>:
void usart_to_spi(void const *argument);
void spi_to_usart(void const *argument);
void enterLowPower(void const *argument);
uint8_t reverse_bits(uint8_t number);

int main(void) {
 80001ac:	b5b0      	push	{r4, r5, r7, lr}
 80001ae:	b096      	sub	sp, #88	; 0x58
 80001b0:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001b2:	f000 fe3b 	bl	8000e2c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80001b6:	f000 f9c9 	bl	800054c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001ba:	f000 fb37 	bl	800082c <MX_GPIO_Init>
	MX_DMA_Init();
 80001be:	f000 faff 	bl	80007c0 <MX_DMA_Init>
	MX_USART2_Init();
 80001c2:	f000 fad1 	bl	8000768 <MX_USART2_Init>
	MX_SPI2_Init();
 80001c6:	f000 f9fd 	bl	80005c4 <MX_SPI2_Init>
	MX_TIM2_Init();
 80001ca:	f000 fa33 	bl	8000634 <MX_TIM2_Init>
	MX_TIM3_Init();
 80001ce:	f000 fa7d 	bl	80006cc <MX_TIM3_Init>

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(usartTOSpi, usart_to_spi, osPriorityAboveNormal, 0, 128);
 80001d2:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <main+0x9c>)
 80001d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	usartToSpiHandle = osThreadCreate(osThread(usartTOSpi), NULL);
 80001e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f003 fc47 	bl	8003a80 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a15      	ldr	r2, [pc, #84]	; (800024c <main+0xa0>)
 80001f6:	6013      	str	r3, [r2, #0]
	osThreadDef(spiToUsart, spi_to_usart, osPriorityAboveNormal, 0, 128);
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <main+0xa4>)
 80001fa:	f107 0420 	add.w	r4, r7, #32
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	spiToUsartHandle = osThreadCreate(osThread(spiToUsart), NULL);
 800020c:	f107 0320 	add.w	r3, r7, #32
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fc34 	bl	8003a80 <osThreadCreate>
 8000218:	4603      	mov	r3, r0
 800021a:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <main+0xa8>)
 800021c:	6013      	str	r3, [r2, #0]
	osThreadDef(lowEnergy, enterLowPower, osPriorityNormal, 0, 128);
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <main+0xac>)
 8000220:	1d3c      	adds	r4, r7, #4
 8000222:	461d      	mov	r5, r3
 8000224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	lowPowerHandle = osThreadCreate(osThread(lowEnergy), NULL);
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f003 fc23 	bl	8003a80 <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <main+0xb0>)
 800023e:	6013      	str	r3, [r2, #0]

	/* Start scheduler */
	osKernelStart();
 8000240:	f003 fc17 	bl	8003a72 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1) {
 8000244:	e7fe      	b.n	8000244 <main+0x98>
 8000246:	bf00      	nop
 8000248:	080051d0 	.word	0x080051d0
 800024c:	20000584 	.word	0x20000584
 8000250:	080051f8 	.word	0x080051f8
 8000254:	20000588 	.word	0x20000588
 8000258:	08005220 	.word	0x08005220
 800025c:	2000058c 	.word	0x2000058c

08000260 <enterLowPower>:

	}
}
//Task for entrance to low energy mode
void enterLowPower(void const *argument) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	for (;;) {
		HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI);
 8000268:	2101      	movs	r1, #1
 800026a:	2000      	movs	r0, #0
 800026c:	f001 fa62 	bl	8001734 <HAL_PWR_EnterSLEEPMode>
 8000270:	e7fa      	b.n	8000268 <enterLowPower+0x8>
	...

08000274 <usart_to_spi>:
	}
}
//Task for USART message receiving and transmitting via SPI
void usart_to_spi(void const *argument) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	; 0x28
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	uint8_t spi_tx[20];
	for (;;) {
		HAL_USART_Receive_DMA(&husart2, usart_rx_buffer, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	492f      	ldr	r1, [pc, #188]	; (800033c <usart_to_spi+0xc8>)
 8000280:	482f      	ldr	r0, [pc, #188]	; (8000340 <usart_to_spi+0xcc>)
 8000282:	f003 f8e7 	bl	8003454 <HAL_USART_Receive_DMA>
		ulTaskNotifyTake(0, portMAX_DELAY);
 8000286:	f04f 31ff 	mov.w	r1, #4294967295
 800028a:	2000      	movs	r0, #0
 800028c:	f004 f9a6 	bl	80045dc <ulTaskNotifyTake>
		for (int k = 0; k < spi_num_of_bytes; k++) {
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24
 8000294:	e011      	b.n	80002ba <usart_to_spi+0x46>
			spi_tx[k] = reverse_bits(usart_rx_buffer[k]);
 8000296:	4a29      	ldr	r2, [pc, #164]	; (800033c <usart_to_spi+0xc8>)
 8000298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fb04 	bl	80008ac <reverse_bits>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4619      	mov	r1, r3
 80002a8:	f107 020c 	add.w	r2, r7, #12
 80002ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ae:	4413      	add	r3, r2
 80002b0:	460a      	mov	r2, r1
 80002b2:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < spi_num_of_bytes; k++) {
 80002b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b6:	3301      	adds	r3, #1
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <usart_to_spi+0xd0>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c2:	4293      	cmp	r3, r2
 80002c4:	dbe7      	blt.n	8000296 <usart_to_spi+0x22>
		}
		for (uint8_t j = 1; j < spi_num_of_bytes; j += 2) {
 80002c6:	2301      	movs	r3, #1
 80002c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80002cc:	e022      	b.n	8000314 <usart_to_spi+0xa0>
			uint8_t temp = spi_tx[j - 1];
 80002ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002d2:	3b01      	subs	r3, #1
 80002d4:	3328      	adds	r3, #40	; 0x28
 80002d6:	443b      	add	r3, r7
 80002d8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			spi_tx[j - 1] = spi_tx[j];
 80002e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80002e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002e8:	3b01      	subs	r3, #1
 80002ea:	3228      	adds	r2, #40	; 0x28
 80002ec:	443a      	add	r2, r7
 80002ee:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80002f2:	3328      	adds	r3, #40	; 0x28
 80002f4:	443b      	add	r3, r7
 80002f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
			spi_tx[j] = temp;
 80002fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002fe:	3328      	adds	r3, #40	; 0x28
 8000300:	443b      	add	r3, r7
 8000302:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000306:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint8_t j = 1; j < spi_num_of_bytes; j += 2) {
 800030a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800030e:	3302      	adds	r3, #2
 8000310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <usart_to_spi+0xd0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800031c:	429a      	cmp	r2, r3
 800031e:	d3d6      	bcc.n	80002ce <usart_to_spi+0x5a>
		}
		HAL_SPI_Transmit_DMA(&hspi2, spi_tx, spi_num_of_bytes);
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <usart_to_spi+0xd0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	b29a      	uxth	r2, r3
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	4619      	mov	r1, r3
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <usart_to_spi+0xd4>)
 800032e:	f001 fee1 	bl	80020f4 <HAL_SPI_Transmit_DMA>
		spi_num_of_bytes = 0;
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <usart_to_spi+0xd0>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
		HAL_USART_Receive_DMA(&husart2, usart_rx_buffer, 1);
 8000338:	e7a0      	b.n	800027c <usart_to_spi+0x8>
 800033a:	bf00      	nop
 800033c:	2000031c 	.word	0x2000031c
 8000340:	200004b8 	.word	0x200004b8
 8000344:	20000344 	.word	0x20000344
 8000348:	20000348 	.word	0x20000348

0800034c <spi_to_usart>:
	}
}
//Task for SPI message receiving and transmitting via USART
void spi_to_usart(void const *argument) {
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	uint8_t usart_tx[20];
	for (;;) {
		HAL_SPI_Receive_DMA(&hspi2, spi_rx_buffer, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	4929      	ldr	r1, [pc, #164]	; (80003fc <spi_to_usart+0xb0>)
 8000358:	4829      	ldr	r0, [pc, #164]	; (8000400 <spi_to_usart+0xb4>)
 800035a:	f001 ff7d 	bl	8002258 <HAL_SPI_Receive_DMA>
		ulTaskNotifyTake(0, portMAX_DELAY);
 800035e:	f04f 31ff 	mov.w	r1, #4294967295
 8000362:	2000      	movs	r0, #0
 8000364:	f004 f93a 	bl	80045dc <ulTaskNotifyTake>
		for (uint8_t k = 0; k < usart_num_of_bytes; k++) {
 8000368:	2300      	movs	r3, #0
 800036a:	77fb      	strb	r3, [r7, #31]
 800036c:	e010      	b.n	8000390 <spi_to_usart+0x44>
			usart_tx[k] = reverse_bits(spi_rx_buffer[k]);
 800036e:	7ffb      	ldrb	r3, [r7, #31]
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <spi_to_usart+0xb0>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	7ffc      	ldrb	r4, [r7, #31]
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fa98 	bl	80008ac <reverse_bits>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	f104 0320 	add.w	r3, r4, #32
 8000384:	443b      	add	r3, r7
 8000386:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (uint8_t k = 0; k < usart_num_of_bytes; k++) {
 800038a:	7ffb      	ldrb	r3, [r7, #31]
 800038c:	3301      	adds	r3, #1
 800038e:	77fb      	strb	r3, [r7, #31]
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <spi_to_usart+0xb8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	7ffa      	ldrb	r2, [r7, #31]
 8000396:	429a      	cmp	r2, r3
 8000398:	d3e9      	bcc.n	800036e <spi_to_usart+0x22>
		}
		for (uint8_t j = 1; j < usart_num_of_bytes; j += 2) {
 800039a:	2301      	movs	r3, #1
 800039c:	77bb      	strb	r3, [r7, #30]
 800039e:	e01a      	b.n	80003d6 <spi_to_usart+0x8a>
			uint8_t temp = usart_tx[j - 1];
 80003a0:	7fbb      	ldrb	r3, [r7, #30]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	3320      	adds	r3, #32
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80003ac:	777b      	strb	r3, [r7, #29]
			usart_tx[j - 1] = usart_tx[j];
 80003ae:	7fba      	ldrb	r2, [r7, #30]
 80003b0:	7fbb      	ldrb	r3, [r7, #30]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	3220      	adds	r2, #32
 80003b6:	443a      	add	r2, r7
 80003b8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80003bc:	3320      	adds	r3, #32
 80003be:	443b      	add	r3, r7
 80003c0:	f803 2c18 	strb.w	r2, [r3, #-24]
			usart_tx[j] = temp;
 80003c4:	7fbb      	ldrb	r3, [r7, #30]
 80003c6:	3320      	adds	r3, #32
 80003c8:	443b      	add	r3, r7
 80003ca:	7f7a      	ldrb	r2, [r7, #29]
 80003cc:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (uint8_t j = 1; j < usart_num_of_bytes; j += 2) {
 80003d0:	7fbb      	ldrb	r3, [r7, #30]
 80003d2:	3302      	adds	r3, #2
 80003d4:	77bb      	strb	r3, [r7, #30]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <spi_to_usart+0xb8>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	7fba      	ldrb	r2, [r7, #30]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d3df      	bcc.n	80003a0 <spi_to_usart+0x54>
		}
		HAL_USART_Transmit_DMA(&husart2, usart_tx, usart_num_of_bytes);
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <spi_to_usart+0xb8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	4806      	ldr	r0, [pc, #24]	; (8000408 <spi_to_usart+0xbc>)
 80003ee:	f002 ffc5 	bl	800337c <HAL_USART_Transmit_DMA>
		usart_num_of_bytes = 0;
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <spi_to_usart+0xb8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi2, spi_rx_buffer, 1);
 80003f8:	e7ac      	b.n	8000354 <spi_to_usart+0x8>
 80003fa:	bf00      	nop
 80003fc:	20000330 	.word	0x20000330
 8000400:	20000348 	.word	0x20000348
 8000404:	20000345 	.word	0x20000345
 8000408:	200004b8 	.word	0x200004b8

0800040c <HAL_USART_RxCpltCallback>:
	}
}
//USART data receive via DMA callback
void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000414:	4814      	ldr	r0, [pc, #80]	; (8000468 <HAL_USART_RxCpltCallback+0x5c>)
 8000416:	f002 fbe5 	bl	8002be4 <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0;
 800041a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <HAL_USART_RxCpltCallback+0x5c>)
 8000424:	f002 fb8c 	bl	8002b40 <HAL_TIM_Base_Start_IT>
	usart_num_of_bytes++;
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <HAL_USART_RxCpltCallback+0x60>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <HAL_USART_RxCpltCallback+0x60>)
 8000432:	701a      	strb	r2, [r3, #0]
	if (usart_num_of_bytes > 9) {
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <HAL_USART_RxCpltCallback+0x60>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b09      	cmp	r3, #9
 800043a:	d906      	bls.n	800044a <HAL_USART_RxCpltCallback+0x3e>
		vTaskNotifyGiveFromISR(usartToSpiHandle, 0);
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <HAL_USART_RxCpltCallback+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f004 f916 	bl	8004674 <vTaskNotifyGiveFromISR>
	} else {
		HAL_USART_Receive_DMA(&husart2, &usart_rx_buffer[usart_num_of_bytes],
				1);
	}

}
 8000448:	e009      	b.n	800045e <HAL_USART_RxCpltCallback+0x52>
		HAL_USART_Receive_DMA(&husart2, &usart_rx_buffer[usart_num_of_bytes],
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_USART_RxCpltCallback+0x60>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_USART_RxCpltCallback+0x68>)
 8000452:	4413      	add	r3, r2
 8000454:	2201      	movs	r2, #1
 8000456:	4619      	mov	r1, r3
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <HAL_USART_RxCpltCallback+0x6c>)
 800045a:	f002 fffb 	bl	8003454 <HAL_USART_Receive_DMA>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000428 	.word	0x20000428
 800046c:	20000345 	.word	0x20000345
 8000470:	20000584 	.word	0x20000584
 8000474:	2000031c 	.word	0x2000031c
 8000478:	200004b8 	.word	0x200004b8

0800047c <HAL_SPI_RxCpltCallback>:
//SPI data receive via DMA callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000484:	4813      	ldr	r0, [pc, #76]	; (80004d4 <HAL_SPI_RxCpltCallback+0x58>)
 8000486:	f002 fbad 	bl	8002be4 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = 0;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <HAL_SPI_RxCpltCallback+0x5c>)
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <HAL_SPI_RxCpltCallback+0x58>)
 8000492:	f002 fb55 	bl	8002b40 <HAL_TIM_Base_Start_IT>
	spi_num_of_bytes++;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_SPI_RxCpltCallback+0x60>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_SPI_RxCpltCallback+0x60>)
 80004a0:	701a      	strb	r2, [r3, #0]
	if (spi_num_of_bytes == 10) {
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_SPI_RxCpltCallback+0x60>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b0a      	cmp	r3, #10
 80004a8:	d106      	bne.n	80004b8 <HAL_SPI_RxCpltCallback+0x3c>
		vTaskNotifyGiveFromISR(spiToUsartHandle, 0);
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <HAL_SPI_RxCpltCallback+0x64>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 f8df 	bl	8004674 <vTaskNotifyGiveFromISR>
	} else {
		HAL_SPI_Receive_DMA(&hspi2, &spi_rx_buffer[spi_num_of_bytes], 1);
	}

}
 80004b6:	e009      	b.n	80004cc <HAL_SPI_RxCpltCallback+0x50>
		HAL_SPI_Receive_DMA(&hspi2, &spi_rx_buffer[spi_num_of_bytes], 1);
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_SPI_RxCpltCallback+0x60>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_SPI_RxCpltCallback+0x68>)
 80004c0:	4413      	add	r3, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	4808      	ldr	r0, [pc, #32]	; (80004e8 <HAL_SPI_RxCpltCallback+0x6c>)
 80004c8:	f001 fec6 	bl	8002258 <HAL_SPI_Receive_DMA>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000470 	.word	0x20000470
 80004d8:	40000400 	.word	0x40000400
 80004dc:	20000344 	.word	0x20000344
 80004e0:	20000588 	.word	0x20000588
 80004e4:	20000330 	.word	0x20000330
 80004e8:	20000348 	.word	0x20000348

080004ec <HAL_TIM_PeriodElapsedCallback>:
//timers timeout callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d102      	bne.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 80004fe:	f000 fcab 	bl	8000e58 <HAL_IncTick>
		vTaskNotifyGiveFromISR(usartToSpiHandle, 0);
	} else if (htim->Instance == TIM3) {
		vTaskNotifyGiveFromISR(spiToUsartHandle, 0);
	}

}
 8000502:	e016      	b.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x46>
	} else if (htim->Instance == TIM2) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800050c:	d106      	bne.n	800051c <HAL_TIM_PeriodElapsedCallback+0x30>
		vTaskNotifyGiveFromISR(usartToSpiHandle, 0);
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f004 f8ad 	bl	8004674 <vTaskNotifyGiveFromISR>
}
 800051a:	e00a      	b.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x46>
	} else if (htim->Instance == TIM3) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d105      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x46>
		vTaskNotifyGiveFromISR(spiToUsartHandle, 0);
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 f8a1 	bl	8004674 <vTaskNotifyGiveFromISR>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40012c00 	.word	0x40012c00
 8000540:	20000584 	.word	0x20000584
 8000544:	40000400 	.word	0x40000400
 8000548:	20000588 	.word	0x20000588

0800054c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2228      	movs	r2, #40	; 0x28
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fd4e 	bl	8004ffc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f8f2 	bl	800176c <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x46>
		Error_Handler();
 800058e:	f000 f987 	bl	80008a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fb60 	bl	8001c70 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x6e>
		Error_Handler();
 80005b6:	f000 f973 	bl	80008a0 <Error_Handler>
	}
}
 80005ba:	bf00      	nop
 80005bc:	3740      	adds	r7, #64	; 0x40
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	hspi2.Instance = SPI2;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_SPI2_Init+0x68>)
 80005ca:	4a19      	ldr	r2, [pc, #100]	; (8000630 <MX_SPI2_Init+0x6c>)
 80005cc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_SPI2_Init+0x68>)
 80005d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_SPI2_Init+0x68>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_SPI2_Init+0x68>)
 80005de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_SPI2_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_SPI2_Init+0x68>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_SPI2_Init+0x68>)
 80005f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f6:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_SPI2_Init+0x68>)
 80005fa:	2228      	movs	r2, #40	; 0x28
 80005fc:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_SPI2_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_SPI2_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_SPI2_Init+0x68>)
 800060c:	2200      	movs	r2, #0
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_SPI2_Init+0x68>)
 8000612:	220a      	movs	r2, #10
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_SPI2_Init+0x68>)
 8000618:	f001 fce8 	bl	8001fec <HAL_SPI_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_SPI2_Init+0x62>
		Error_Handler();
 8000622:	f000 f93d 	bl	80008a0 <Error_Handler>
	}

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000348 	.word	0x20000348
 8000630:	40003800 	.word	0x40003800

08000634 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
//timer for USART data receive timeout
static void MX_TIM2_Init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000656:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_TIM2_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 834;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000666:	f240 3242 	movw	r2, #834	; 0x342
 800066a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_TIM2_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_TIM2_Init+0x94>)
 800067a:	f002 fa11 	bl	8002aa0 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000684:	f000 f90c 	bl	80008a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000696:	f002 fbdb 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80006a0:	f000 f8fe 	bl	80008a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_TIM2_Init+0x94>)
 80006b2:	f002 fdb1 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80006bc:	f000 f8f0 	bl	80008a0 <Error_Handler>
	}

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000428 	.word	0x20000428

080006cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
//timer for SPI data receive timeout
static void MX_TIM3_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]

	htim3.Instance = TIM3;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_TIM3_Init+0x94>)
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <MX_TIM3_Init+0x98>)
 80006ec:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_TIM3_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM3_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 584;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_TIM3_Init+0x94>)
 80006fc:	f44f 7212 	mov.w	r2, #584	; 0x248
 8000700:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_TIM3_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_TIM3_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <MX_TIM3_Init+0x94>)
 8000710:	f002 f9c6 	bl	8002aa0 <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x52>
		Error_Handler();
 800071a:	f000 f8c1 	bl	80008a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_TIM3_Init+0x94>)
 800072c:	f002 fb90 	bl	8002e50 <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000736:	f000 f8b3 	bl	80008a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_TIM3_Init+0x94>)
 8000748:	f002 fd66 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000752:	f000 f8a5 	bl	80008a0 <Error_Handler>
	}
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000470 	.word	0x20000470
 8000764:	40000400 	.word	0x40000400

08000768 <MX_USART2_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	husart2.Instance = USART2;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART2_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_USART2_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
	husart2.Init.BaudRate = 115200;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_Init+0x50>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
	husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
	husart2.Init.StopBits = USART_STOPBITS_1;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_USART2_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
	husart2.Init.Parity = USART_PARITY_NONE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
	husart2.Init.Mode = USART_MODE_TX_RX;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART2_Init+0x50>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
	husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
	husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_USART2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
	husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
	if (HAL_USART_Init(&husart2) != HAL_OK) {
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a6:	f002 fda7 	bl	80032f8 <HAL_USART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_Init+0x4c>
		Error_Handler();
 80007b0:	f000 f876 	bl	80008a0 <Error_Handler>
	}
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200004b8 	.word	0x200004b8
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_DMA_Init+0x68>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_DMA_Init+0x68>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA_Init+0x68>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	200e      	movs	r0, #14
 80007e4:	f000 fc09 	bl	8000ffa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007e8:	200e      	movs	r0, #14
 80007ea:	f000 fc22 	bl	8001032 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 fc01 	bl	8000ffa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007f8:	200f      	movs	r0, #15
 80007fa:	f000 fc1a 	bl	8001032 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	2010      	movs	r0, #16
 8000804:	f000 fbf9 	bl	8000ffa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000808:	2010      	movs	r0, #16
 800080a:	f000 fc12 	bl	8001032 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2105      	movs	r1, #5
 8000812:	2011      	movs	r0, #17
 8000814:	f000 fbf1 	bl	8000ffa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000818:	2011      	movs	r0, #17
 800081a:	f000 fc0a 	bl	8001032 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_GPIO_Init+0x70>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a19      	ldr	r2, [pc, #100]	; (800089c <MX_GPIO_Init+0x70>)
 8000838:	f043 0310 	orr.w	r3, r3, #16
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_GPIO_Init+0x70>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_GPIO_Init+0x70>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <MX_GPIO_Init+0x70>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_GPIO_Init+0x70>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_GPIO_Init+0x70>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <MX_GPIO_Init+0x70>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_GPIO_Init+0x70>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_GPIO_Init+0x70>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <MX_GPIO_Init+0x70>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_GPIO_Init+0x70>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000

080008a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop

	__disable_irq();
	NVIC_SystemReset();
 80008a8:	f7ff fc6a 	bl	8000180 <__NVIC_SystemReset>

080008ac <reverse_bits>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
//Function to change bit order in byte
uint8_t reverse_bits(uint8_t number) {
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t reversed_number = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	73bb      	strb	r3, [r7, #14]
 80008be:	e016      	b.n	80008ee <reverse_bits+0x42>
		if (number & (1 << (7 - i))) {
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	f1c3 0307 	rsb	r3, r3, #7
 80008c8:	fa42 f303 	asr.w	r3, r2, r3
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d009      	beq.n	80008e8 <reverse_bits+0x3c>
			reversed_number |= (1 << i);
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	2201      	movs	r2, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++) {
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	3301      	adds	r3, #1
 80008ec:	73bb      	strb	r3, [r7, #14]
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d9e5      	bls.n	80008c0 <reverse_bits+0x14>
		}
	}
	return reversed_number;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_MspInit+0x68>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_MspInit+0x68>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_MspInit+0x68>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x68>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_MspInit+0x68>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x68>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fb5c 	bl	8000ffa <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_MspInit+0x6c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_MspInit+0x6c>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a46      	ldr	r2, [pc, #280]	; (8000aa4 <HAL_SPI_MspInit+0x134>)
 800098c:	4293      	cmp	r3, r2
 800098e:	f040 8084 	bne.w	8000a9a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <HAL_SPI_MspInit+0x138>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <HAL_SPI_MspInit+0x138>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <HAL_SPI_MspInit+0x138>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <HAL_SPI_MspInit+0x138>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <HAL_SPI_MspInit+0x138>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <HAL_SPI_MspInit+0x138>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4835      	ldr	r0, [pc, #212]	; (8000aac <HAL_SPI_MspInit+0x13c>)
 80009d8:	f000 fd28 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	482e      	ldr	r0, [pc, #184]	; (8000aac <HAL_SPI_MspInit+0x13c>)
 80009f2:	f000 fd1b 	bl	800142c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 80009f8:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <HAL_SPI_MspInit+0x144>)
 80009fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a2e:	f000 fb0f 	bl	8001050 <HAL_DMA_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000a38:	f7ff ff32 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a40:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_SPI_MspInit+0x140>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <HAL_SPI_MspInit+0x14c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a50:	2210      	movs	r2, #16
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a80:	f000 fae6 	bl	8001050 <HAL_DMA_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8000a8a:	f7ff ff09 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a92:	649a      	str	r2, [r3, #72]	; 0x48
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_SPI_MspInit+0x148>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40003800 	.word	0x40003800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	200003a0 	.word	0x200003a0
 8000ab4:	40020044 	.word	0x40020044
 8000ab8:	200003e4 	.word	0x200003e4
 8000abc:	40020058 	.word	0x40020058

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d10c      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_TIM_Base_MspInit+0x58>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_TIM_Base_MspInit+0x58>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_TIM_Base_MspInit+0x58>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aea:	e010      	b.n	8000b0e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_TIM_Base_MspInit+0x5c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10b      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_TIM_Base_MspInit+0x58>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_TIM_Base_MspInit+0x58>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_TIM_Base_MspInit+0x58>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40000400 	.word	0x40000400

08000b20 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <HAL_USART_MspInit+0x124>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d17d      	bne.n	8000c3c <HAL_USART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b40:	4b41      	ldr	r3, [pc, #260]	; (8000c48 <HAL_USART_MspInit+0x128>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <HAL_USART_MspInit+0x128>)
 8000b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4a:	61d3      	str	r3, [r2, #28]
 8000b4c:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <HAL_USART_MspInit+0x128>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <HAL_USART_MspInit+0x128>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <HAL_USART_MspInit+0x128>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <HAL_USART_MspInit+0x128>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000b70:	2314      	movs	r3, #20
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4832      	ldr	r0, [pc, #200]	; (8000c4c <HAL_USART_MspInit+0x12c>)
 8000b84:	f000 fc52 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482c      	ldr	r0, [pc, #176]	; (8000c4c <HAL_USART_MspInit+0x12c>)
 8000b9c:	f000 fc46 	bl	800142c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <HAL_USART_MspInit+0x134>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000bd2:	481f      	ldr	r0, [pc, #124]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bd4:	f000 fa3c 	bl	8001050 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_USART_MspInit+0xc2>
    {
      Error_Handler();
 8000bde:	f7ff fe5f 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmarx,hdma_usart2_rx);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_USART_MspInit+0x130>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <HAL_USART_MspInit+0x13c>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c22:	f000 fa15 	bl	8001050 <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8000c2c:	f7ff fe38 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart2_tx);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_USART_MspInit+0x138>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	200004fc 	.word	0x200004fc
 8000c54:	4002006c 	.word	0x4002006c
 8000c58:	20000540 	.word	0x20000540
 8000c5c:	40020080 	.word	0x40020080

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_InitTick+0xd0>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a2d      	ldr	r2, [pc, #180]	; (8000d30 <HAL_InitTick+0xd0>)
 8000c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <HAL_InitTick+0xd0>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8e:	f107 020c 	add.w	r2, r7, #12
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 f959 	bl	8001f50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c9e:	f001 f943 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8000ca2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <HAL_InitTick+0xd4>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	0c9b      	lsrs	r3, r3, #18
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <HAL_InitTick+0xdc>)
 8000cb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cbe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cda:	f001 fee1 	bl	8002aa0 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d11b      	bne.n	8000d24 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <HAL_InitTick+0xd8>)
 8000cee:	f001 ff27 	bl	8002b40 <HAL_TIM_Base_Start_IT>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d111      	bne.n	8000d24 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d00:	2019      	movs	r0, #25
 8000d02:	f000 f996 	bl	8001032 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d808      	bhi.n	8000d1e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	2019      	movs	r0, #25
 8000d12:	f000 f972 	bl	8000ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_InitTick+0xe0>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e002      	b.n	8000d24 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3730      	adds	r7, #48	; 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	431bde83 	.word	0x431bde83
 8000d38:	20000590 	.word	0x20000590
 8000d3c:	40012c00 	.word	0x40012c00
 8000d40:	20000004 	.word	0x20000004

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
	...

08000d70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA1_Channel4_IRQHandler+0x10>)
 8000d76:	f000 fa25 	bl	80011c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200003a0 	.word	0x200003a0

08000d84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <DMA1_Channel5_IRQHandler+0x10>)
 8000d8a:	f000 fa1b 	bl	80011c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200003e4 	.word	0x200003e4

08000d98 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA1_Channel6_IRQHandler+0x10>)
 8000d9e:	f000 fa11 	bl	80011c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200004fc 	.word	0x200004fc

08000dac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Channel7_IRQHandler+0x10>)
 8000db2:	f000 fa07 	bl	80011c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000540 	.word	0x20000540

08000dc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM1_UP_IRQHandler+0x10>)
 8000dc6:	f001 ff3b 	bl	8002c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000590 	.word	0x20000590

08000dd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff fff8 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000de6:	490c      	ldr	r1, [pc, #48]	; (8000e18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dfc:	4c09      	ldr	r4, [pc, #36]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f004 f955 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0e:	f7ff f9cd 	bl	80001ac <main>
  bx lr
 8000e12:	4770      	bx	lr
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e1c:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8000e20:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e24:	20001468 	.word	0x20001468

08000e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_2_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x28>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x28>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f8d1 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff ff0c 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fd5a 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000008 	.word	0x20000008
 8000e78:	200005d8 	.word	0x200005d8

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	200005d8 	.word	0x200005d8

08000e90 <__NVIC_SetPriorityGrouping>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4906      	ldr	r1, [pc, #24]	; (8000f28 <__NVIC_EnableIRQ+0x34>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff4f 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff64 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ffb2 	bl	8000f80 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff81 	bl	8000f2c <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff57 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e043      	b.n	80010ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_DMA_Init+0xa8>)
 800106e:	4413      	add	r3, r2
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <HAL_DMA_Init+0xac>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_DMA_Init+0xb0>)
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800109a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800109e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	bffdfff8 	.word	0xbffdfff8
 80010fc:	cccccccd 	.word	0xcccccccd
 8001100:	40020000 	.word	0x40020000

08001104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_DMA_Start_IT+0x20>
 8001120:	2302      	movs	r3, #2
 8001122:	e04b      	b.n	80011bc <HAL_DMA_Start_IT+0xb8>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d13a      	bne.n	80011ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f937 	bl	80013d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 020e 	orr.w	r2, r2, #14
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00f      	b.n	800119c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 020a 	orr.w	r2, r2, #10
 800119a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e005      	b.n	80011ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011b6:	2302      	movs	r3, #2
 80011b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	2204      	movs	r2, #4
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d04f      	beq.n	800128c <HAL_DMA_IRQHandler+0xc8>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d04a      	beq.n	800128c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a66      	ldr	r2, [pc, #408]	; (80013b4 <HAL_DMA_IRQHandler+0x1f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d029      	beq.n	8001272 <HAL_DMA_IRQHandler+0xae>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a65      	ldr	r2, [pc, #404]	; (80013b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d022      	beq.n	800126e <HAL_DMA_IRQHandler+0xaa>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a63      	ldr	r2, [pc, #396]	; (80013bc <HAL_DMA_IRQHandler+0x1f8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01a      	beq.n	8001268 <HAL_DMA_IRQHandler+0xa4>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a62      	ldr	r2, [pc, #392]	; (80013c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d012      	beq.n	8001262 <HAL_DMA_IRQHandler+0x9e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a60      	ldr	r2, [pc, #384]	; (80013c4 <HAL_DMA_IRQHandler+0x200>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00a      	beq.n	800125c <HAL_DMA_IRQHandler+0x98>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a5f      	ldr	r2, [pc, #380]	; (80013c8 <HAL_DMA_IRQHandler+0x204>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d102      	bne.n	8001256 <HAL_DMA_IRQHandler+0x92>
 8001250:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001254:	e00e      	b.n	8001274 <HAL_DMA_IRQHandler+0xb0>
 8001256:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800125a:	e00b      	b.n	8001274 <HAL_DMA_IRQHandler+0xb0>
 800125c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001260:	e008      	b.n	8001274 <HAL_DMA_IRQHandler+0xb0>
 8001262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001266:	e005      	b.n	8001274 <HAL_DMA_IRQHandler+0xb0>
 8001268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126c:	e002      	b.n	8001274 <HAL_DMA_IRQHandler+0xb0>
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	e000      	b.n	8001274 <HAL_DMA_IRQHandler+0xb0>
 8001272:	2304      	movs	r3, #4
 8001274:	4a55      	ldr	r2, [pc, #340]	; (80013cc <HAL_DMA_IRQHandler+0x208>)
 8001276:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8094 	beq.w	80013aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800128a:	e08e      	b.n	80013aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	2202      	movs	r2, #2
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d056      	beq.n	800134a <HAL_DMA_IRQHandler+0x186>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d051      	beq.n	800134a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10b      	bne.n	80012cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 020a 	bic.w	r2, r2, #10
 80012c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <HAL_DMA_IRQHandler+0x1f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d029      	beq.n	800132a <HAL_DMA_IRQHandler+0x166>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <HAL_DMA_IRQHandler+0x1f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d022      	beq.n	8001326 <HAL_DMA_IRQHandler+0x162>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a35      	ldr	r2, [pc, #212]	; (80013bc <HAL_DMA_IRQHandler+0x1f8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01a      	beq.n	8001320 <HAL_DMA_IRQHandler+0x15c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <HAL_DMA_IRQHandler+0x1fc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d012      	beq.n	800131a <HAL_DMA_IRQHandler+0x156>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <HAL_DMA_IRQHandler+0x200>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00a      	beq.n	8001314 <HAL_DMA_IRQHandler+0x150>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <HAL_DMA_IRQHandler+0x204>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d102      	bne.n	800130e <HAL_DMA_IRQHandler+0x14a>
 8001308:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800130c:	e00e      	b.n	800132c <HAL_DMA_IRQHandler+0x168>
 800130e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001312:	e00b      	b.n	800132c <HAL_DMA_IRQHandler+0x168>
 8001314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001318:	e008      	b.n	800132c <HAL_DMA_IRQHandler+0x168>
 800131a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131e:	e005      	b.n	800132c <HAL_DMA_IRQHandler+0x168>
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	e002      	b.n	800132c <HAL_DMA_IRQHandler+0x168>
 8001326:	2320      	movs	r3, #32
 8001328:	e000      	b.n	800132c <HAL_DMA_IRQHandler+0x168>
 800132a:	2302      	movs	r3, #2
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_DMA_IRQHandler+0x208>)
 800132e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	2b00      	cmp	r3, #0
 800133e:	d034      	beq.n	80013aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001348:	e02f      	b.n	80013aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2208      	movs	r2, #8
 8001350:	409a      	lsls	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d028      	beq.n	80013ac <HAL_DMA_IRQHandler+0x1e8>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d023      	beq.n	80013ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 020e 	bic.w	r2, r2, #14
 8001372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	2101      	movs	r1, #1
 800137e:	fa01 f202 	lsl.w	r2, r1, r2
 8001382:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
    }
  }
  return;
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
}
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40020008 	.word	0x40020008
 80013b8:	4002001c 	.word	0x4002001c
 80013bc:	40020030 	.word	0x40020030
 80013c0:	40020044 	.word	0x40020044
 80013c4:	40020058 	.word	0x40020058
 80013c8:	4002006c 	.word	0x4002006c
 80013cc:	40020000 	.word	0x40020000

080013d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d108      	bne.n	8001410 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800140e:	e007      	b.n	8001420 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b08b      	sub	sp, #44	; 0x2c
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e169      	b.n	8001714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001440:	2201      	movs	r2, #1
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8158 	bne.w	800170e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a9a      	ldr	r2, [pc, #616]	; (80016cc <HAL_GPIO_Init+0x2a0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d05e      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001468:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_GPIO_Init+0x2a0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d875      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800146e:	4a98      	ldr	r2, [pc, #608]	; (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d058      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001474:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d86f      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800147a:	4a96      	ldr	r2, [pc, #600]	; (80016d4 <HAL_GPIO_Init+0x2a8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d052      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001480:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x2a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d869      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001486:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <HAL_GPIO_Init+0x2ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d04c      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 800148c:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x2ac>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d863      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001492:	4a92      	ldr	r2, [pc, #584]	; (80016dc <HAL_GPIO_Init+0x2b0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d046      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001498:	4a90      	ldr	r2, [pc, #576]	; (80016dc <HAL_GPIO_Init+0x2b0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d85d      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d82a      	bhi.n	80014f8 <HAL_GPIO_Init+0xcc>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d859      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_GPIO_Init+0x80>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001501 	.word	0x08001501
 80014b4:	08001513 	.word	0x08001513
 80014b8:	08001555 	.word	0x08001555
 80014bc:	0800155b 	.word	0x0800155b
 80014c0:	0800155b 	.word	0x0800155b
 80014c4:	0800155b 	.word	0x0800155b
 80014c8:	0800155b 	.word	0x0800155b
 80014cc:	0800155b 	.word	0x0800155b
 80014d0:	0800155b 	.word	0x0800155b
 80014d4:	0800155b 	.word	0x0800155b
 80014d8:	0800155b 	.word	0x0800155b
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	0800155b 	.word	0x0800155b
 80014e4:	0800155b 	.word	0x0800155b
 80014e8:	0800155b 	.word	0x0800155b
 80014ec:	0800155b 	.word	0x0800155b
 80014f0:	08001509 	.word	0x08001509
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	4a79      	ldr	r2, [pc, #484]	; (80016e0 <HAL_GPIO_Init+0x2b4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fe:	e02c      	b.n	800155a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e029      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	3304      	adds	r3, #4
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e024      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	3308      	adds	r3, #8
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e01f      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	330c      	adds	r3, #12
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e01a      	b.n	800155c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152e:	2304      	movs	r3, #4
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e013      	b.n	800155c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	611a      	str	r2, [r3, #16]
          break;
 8001546:	e009      	b.n	800155c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001548:	2308      	movs	r3, #8
 800154a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	615a      	str	r2, [r3, #20]
          break;
 8001552:	e003      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x130>
          break;
 800155a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d801      	bhi.n	8001566 <HAL_GPIO_Init+0x13a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	e001      	b.n	800156a <HAL_GPIO_Init+0x13e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d802      	bhi.n	8001578 <HAL_GPIO_Init+0x14c>
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x152>
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3b08      	subs	r3, #8
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	210f      	movs	r1, #15
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	6a39      	ldr	r1, [r7, #32]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80b1 	beq.w	800170e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2bc>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_GPIO_Init+0x2c0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_GPIO_Init+0x1ec>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3f      	ldr	r2, [pc, #252]	; (80016f0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_GPIO_Init+0x1e8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <HAL_GPIO_Init+0x2c8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_Init+0x1e4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <HAL_GPIO_Init+0x2cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_GPIO_Init+0x1e0>
 8001608:	2303      	movs	r3, #3
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 800160c:	2304      	movs	r3, #4
 800160e:	e004      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001610:	2302      	movs	r3, #2
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001618:	2300      	movs	r3, #0
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162a:	492f      	ldr	r1, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2bc>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	492c      	ldr	r1, [pc, #176]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4928      	ldr	r1, [pc, #160]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4922      	ldr	r1, [pc, #136]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	491e      	ldr	r1, [pc, #120]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4918      	ldr	r1, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4914      	ldr	r1, [pc, #80]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e021      	b.n	800170e <HAL_GPIO_Init+0x2e2>
 80016ca:	bf00      	nop
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10220000 	.word	0x10220000
 80016d8:	10210000 	.word	0x10210000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_GPIO_Init+0x304>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	43db      	mvns	r3, r3
 8001708:	4909      	ldr	r1, [pc, #36]	; (8001730 <HAL_GPIO_Init+0x304>)
 800170a:	4013      	ands	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae8e 	bne.w	8001440 <HAL_GPIO_Init+0x14>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	372c      	adds	r7, #44	; 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001752:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001754:	e002      	b.n	800175c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001756:	bf40      	sev
    __WFE();
 8001758:	bf20      	wfe
    __WFE();
 800175a:	bf20      	wfe
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e272      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8087 	beq.w	800189a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800178c:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b04      	cmp	r3, #4
 8001796:	d00c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001798:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e>
 80017a4:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d06c      	beq.n	8001898 <HAL_RCC_OscConfig+0x12c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d168      	bne.n	8001898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e24c      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x76>
 80017d4:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7f      	ldr	r2, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e02e      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x98>
 80017ea:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7a      	ldr	r2, [pc, #488]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0xbc>
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a71      	ldr	r2, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 8001828:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6a      	ldr	r2, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fb18 	bl	8000e7c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb14 	bl	8000e7c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e200      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xe4>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb04 	bl	8000e7c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fb00 	bl	8000e7c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1ec      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x10c>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x18c>
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1c0      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4939      	ldr	r1, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e03a      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fab9 	bl	8000e7c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fab5 	bl	8000e7c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1a1      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fa98 	bl	8000e7c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fa94 	bl	8000e7c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e180      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03a      	beq.n	80019f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff fa78 	bl	8000e7c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fa74 	bl	8000e7c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e160      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 fafe 	bl	8001fb0 <RCC_Delay>
 80019b4:	e01c      	b.n	80019f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fa5e 	bl	8000e7c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c2:	e00f      	b.n	80019e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fa5a 	bl	8000e7c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d908      	bls.n	80019e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e146      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	42420000 	.word	0x42420000
 80019e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e9      	bne.n	80019c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a6 	beq.w	8001b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a87      	ldr	r2, [pc, #540]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b82      	ldr	r3, [pc, #520]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b7f      	ldr	r3, [pc, #508]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7e      	ldr	r2, [pc, #504]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fa1b 	bl	8000e7c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff fa17 	bl	8000e7c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e103      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x312>
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e02d      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x334>
 8001a86:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a69      	ldr	r2, [pc, #420]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	e01c      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x356>
 8001aa8:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a60      	ldr	r2, [pc, #384]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a5d      	ldr	r2, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d015      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f9cb 	bl	8000e7c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f9c7 	bl	8000e7c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0b1      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <HAL_RCC_OscConfig+0x37e>
 8001b0c:	e014      	b.n	8001b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f9b5 	bl	8000e7c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff f9b1 	bl	8000e7c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e09b      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8087 	beq.w	8001c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d061      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d146      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff f985 	bl	8000e7c <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b76:	f7ff f981 	bl	8000e7c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e06d      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f0      	bne.n	8001b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4921      	ldr	r1, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a19      	ldr	r1, [r3, #32]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x4cc>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff f955 	bl	8000e7c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff f951 	bl	8000e7c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e03d      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x46a>
 8001bf4:	e035      	b.n	8001c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x4cc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f93e 	bl	8000e7c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f93a 	bl	8000e7c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e026      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x498>
 8001c22:	e01e      	b.n	8001c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e019      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_OscConfig+0x500>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0d0      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d910      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4965      	ldr	r1, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d040      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e073      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06b      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4936      	ldr	r1, [pc, #216]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d60:	f7ff f88c 	bl	8000e7c <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff f888 	bl	8000e7c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e053      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d210      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4922      	ldr	r1, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1cc>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe ff1e 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08005244 	.word	0x08005244
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x30>
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x36>
 8001e72:	e027      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e76:	613b      	str	r3, [r7, #16]
      break;
 8001e78:	e027      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0c5b      	lsrs	r3, r3, #17
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea6:	fb03 f202 	mul.w	r2, r3, r2
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e004      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	613b      	str	r3, [r7, #16]
      break;
 8001ec2:	e002      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	613b      	str	r3, [r7, #16]
      break;
 8001ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eca:	693b      	ldr	r3, [r7, #16]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	0800525c 	.word	0x0800525c
 8001ee4:	0800526c 	.word	0x0800526c
 8001ee8:	003d0900 	.word	0x003d0900

08001eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f04:	f7ff fff2 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08005254 	.word	0x08005254

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f2c:	f7ff ffde 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08005254 	.word	0x08005254

08001f50 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_GetClockConfig+0x58>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_GetClockConfig+0x58>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_GetClockConfig+0x58>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_RCC_GetClockConfig+0x58>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_GetClockConfig+0x5c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0207 	and.w	r2, r3, #7
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40022000 	.word	0x40022000

08001fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <RCC_Delay+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <RCC_Delay+0x38>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fcc:	bf00      	nop
  }
  while (Delay --);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <RCC_Delay+0x1c>
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e076      	b.n	80020ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800200e:	d009      	beq.n	8002024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
 8002016:	e005      	b.n	8002024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fc96 	bl	8000970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	ea42 0103 	orr.w	r1, r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	0c1a      	lsrs	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f002 0204 	and.w	r2, r2, #4
 80020ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_SPI_Transmit_DMA+0x20>
 8002110:	2302      	movs	r3, #2
 8002112:	e097      	b.n	8002244 <HAL_SPI_Transmit_DMA+0x150>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d002      	beq.n	800212e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002128:	2302      	movs	r3, #2
 800212a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800212c:	e085      	b.n	800223a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_Transmit_DMA+0x46>
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800213e:	e07c      	b.n	800223a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002186:	d10f      	bne.n	80021a8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002196:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_SPI_Transmit_DMA+0x158>)
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_SPI_Transmit_DMA+0x15c>)
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HAL_SPI_Transmit_DMA+0x160>)
 80021be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	2200      	movs	r2, #0
 80021c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4619      	mov	r1, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	330c      	adds	r3, #12
 80021d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80021e0:	f7fe ff90 	bl	8001104 <HAL_DMA_Start_IT>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80021fa:	e01e      	b.n	800223a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d007      	beq.n	800221a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0202 	orr.w	r2, r2, #2
 8002238:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800281b 	.word	0x0800281b
 8002250:	08002641 	.word	0x08002641
 8002254:	0800286f 	.word	0x0800286f

08002258 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d002      	beq.n	800227c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800227a:	e0a2      	b.n	80023c2 <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d110      	bne.n	80022a6 <HAL_SPI_Receive_DMA+0x4e>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800228c:	d10b      	bne.n	80022a6 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2204      	movs	r2, #4
 8002292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f89f 	bl	80023e0 <HAL_SPI_TransmitReceive_DMA>
 80022a2:	4603      	mov	r3, r0
 80022a4:	e092      	b.n	80023cc <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_SPI_Receive_DMA+0x5c>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e08b      	b.n	80023cc <HAL_SPI_Receive_DMA+0x174>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_SPI_Receive_DMA+0x70>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022cc:	e079      	b.n	80023c2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2204      	movs	r2, #4
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	88fa      	ldrh	r2, [r7, #6]
 80022ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230e:	d10f      	bne.n	8002330 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800231e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800232e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_SPI_Receive_DMA+0x17c>)
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <HAL_SPI_Receive_DMA+0x180>)
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	4a25      	ldr	r2, [pc, #148]	; (80023dc <HAL_SPI_Receive_DMA+0x184>)
 8002346:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	2200      	movs	r2, #0
 800234e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	4619      	mov	r1, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002366:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002368:	f7fe fecc 	bl	8001104 <HAL_DMA_Start_IT>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002382:	e01e      	b.n	80023c2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d007      	beq.n	80023a2 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0220 	orr.w	r2, r2, #32
 80023b0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	08002837 	.word	0x08002837
 80023d8:	080026e7 	.word	0x080026e7
 80023dc:	0800286f 	.word	0x0800286f

080023e0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_SPI_TransmitReceive_DMA+0x20>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0db      	b.n	80025b8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002416:	7dbb      	ldrb	r3, [r7, #22]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00d      	beq.n	8002438 <HAL_SPI_TransmitReceive_DMA+0x58>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002422:	d106      	bne.n	8002432 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <HAL_SPI_TransmitReceive_DMA+0x52>
 800242c:	7dbb      	ldrb	r3, [r7, #22]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d002      	beq.n	8002438 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002436:	e0ba      	b.n	80025ae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800244e:	e0ae      	b.n	80025ae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b04      	cmp	r3, #4
 800245a:	d003      	beq.n	8002464 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2205      	movs	r2, #5
 8002460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d108      	bne.n	80024b8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	4a45      	ldr	r2, [pc, #276]	; (80025c0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
 80024b6:	e007      	b.n	80024c8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	4a41      	ldr	r2, [pc, #260]	; (80025cc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	2200      	movs	r2, #0
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	4619      	mov	r1, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80024f0:	f7fe fe08 	bl	8001104 <HAL_DMA_Start_IT>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]

    goto error;
 800250a:	e050      	b.n	80025ae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	2200      	movs	r2, #0
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002528:	2200      	movs	r2, #0
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4619      	mov	r1, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002552:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002554:	f7fe fdd6 	bl	8001104 <HAL_DMA_Start_IT>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800256e:	e01e      	b.n	80025ae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d007      	beq.n	800258e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0202 	orr.w	r2, r2, #2
 80025ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	08002837 	.word	0x08002837
 80025c4:	080026e7 	.word	0x080026e7
 80025c8:	08002853 	.word	0x08002853
 80025cc:	0800278d 	.word	0x0800278d
 80025d0:	0800286f 	.word	0x0800286f

080025d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800264e:	f7fe fc15 	bl	8000e7c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b20      	cmp	r3, #32
 8002660:	d03b      	beq.n	80026da <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0220 	bic.w	r2, r2, #32
 8002670:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0202 	bic.w	r2, r2, #2
 8002680:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	2164      	movs	r1, #100	; 0x64
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f000 f9ec 	bl	8002a64 <SPI_EndRxTxTransaction>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ffab 	bl	800262e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80026d8:	e002      	b.n	80026e0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff7a 	bl	80025d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026f4:	f7fe fbc2 	bl	8000e7c <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d03b      	beq.n	8002780 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0220 	bic.w	r2, r2, #32
 8002716:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <SPI_DMAReceiveCplt+0x56>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002728:	d108      	bne.n	800273c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0203 	bic.w	r2, r2, #3
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	e007      	b.n	800274c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	2164      	movs	r1, #100	; 0x64
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f935 	bl	80029c0 <SPI_EndRxTransaction>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff58 	bl	800262e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800277e:	e002      	b.n	8002786 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7fd fe7b 	bl	800047c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800279a:	f7fe fb6f 	bl	8000e7c <HAL_GetTick>
 800279e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d02f      	beq.n	800280e <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0220 	bic.w	r2, r2, #32
 80027bc:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	2164      	movs	r1, #100	; 0x64
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f94e 	bl	8002a64 <SPI_EndRxTxTransaction>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0203 	bic.w	r2, r2, #3
 80027e8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff ff11 	bl	800262e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800280c:	e002      	b.n	8002814 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff fee9 	bl	80025e6 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff fee5 	bl	80025f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fee0 	bl	800260a <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fedb 	bl	800261c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0203 	bic.w	r2, r2, #3
 800288a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0210 	orr.w	r2, r3, #16
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fec4 	bl	800262e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028c0:	f7fe fadc 	bl	8000e7c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028d0:	f7fe fad4 	bl	8000e7c <HAL_GetTick>
 80028d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	0d1b      	lsrs	r3, r3, #20
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e6:	e054      	b.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d050      	beq.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028f0:	f7fe fac4 	bl	8000e7c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d902      	bls.n	8002906 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d13d      	bne.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291e:	d111      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	d004      	beq.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002932:	d107      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294c:	d10f      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800296c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e017      	b.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3b01      	subs	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4013      	ands	r3, r2
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d19b      	bne.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000

080029c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d4:	d111      	bne.n	80029fa <SPI_EndRxTransaction+0x3a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029de:	d004      	beq.n	80029ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d107      	bne.n	80029fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a02:	d117      	bne.n	8002a34 <SPI_EndRxTransaction+0x74>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	d112      	bne.n	8002a34 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2101      	movs	r1, #1
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff ff49 	bl	80028b0 <SPI_WaitFlagStateUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01a      	beq.n	8002a5a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e013      	b.n	8002a5c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff ff36 	bl	80028b0 <SPI_WaitFlagStateUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e000      	b.n	8002a5c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff ff18 	bl	80028b0 <SPI_WaitFlagStateUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f043 0220 	orr.w	r2, r3, #32
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e000      	b.n	8002a98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e041      	b.n	8002b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd fffa 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 faa2 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e03a      	b.n	8002bce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_TIM_Base_Start_IT+0x98>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x58>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d009      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x58>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <HAL_TIM_Base_Start_IT+0x9c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x58>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d010      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	e007      	b.n	8002bcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800

08002be4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_TIM_Base_Stop_IT+0x48>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	f240 4344 	movw	r3, #1092	; 0x444
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_Base_Stop_IT+0x48>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0202 	mvn.w	r2, #2
 8002c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9b4 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9a7 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9b6 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0204 	mvn.w	r2, #4
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f98a 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f97d 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f98c 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0208 	mvn.w	r2, #8
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f960 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f953 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f962 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0210 	mvn.w	r2, #16
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f936 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f929 	bl	8002fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f938 	bl	8003002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0201 	mvn.w	r2, #1
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd fb94 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa7b 	bl	80032e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8fc 	bl	8003014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0220 	mvn.w	r2, #32
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa46 	bl	80032d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x1c>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0b4      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x186>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea4:	d03e      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	f200 8087 	bhi.w	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	f000 8086 	beq.w	8002fc2 <HAL_TIM_ConfigClockSource+0x172>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d87f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d01a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ec0:	2b70      	cmp	r3, #112	; 0x70
 8002ec2:	d87b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d050      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x11a>
 8002ec8:	2b60      	cmp	r3, #96	; 0x60
 8002eca:	d877      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d03c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0xfa>
 8002ed0:	2b50      	cmp	r3, #80	; 0x50
 8002ed2:	d873      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d058      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x13a>
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d86f      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d064      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee0:	2b30      	cmp	r3, #48	; 0x30
 8002ee2:	d86b      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d060      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d867      	bhi.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05c      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d05a      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x15a>
 8002ef4:	e062      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	f000 f968 	bl	80031da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
      break;
 8002f22:	e04f      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f34:	f000 f951 	bl	80031da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	609a      	str	r2, [r3, #8]
      break;
 8002f48:	e03c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f8c8 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2150      	movs	r1, #80	; 0x50
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f91f 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f68:	e02c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8e6 	bl	8003148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2160      	movs	r1, #96	; 0x60
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f90f 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e01c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 f8a8 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f8ff 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e00c      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f000 f8f6 	bl	80031a6 <TIM_ITRx_SetConfig>
      break;
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
	...

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <TIM_Base_SetConfig+0xbc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <TIM_Base_SetConfig+0xbc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <TIM_Base_SetConfig+0xb8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	615a      	str	r2, [r3, #20]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800

080030ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0201 	bic.w	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 030a 	bic.w	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0210 	bic.w	r2, r3, #16
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	031b      	lsls	r3, r3, #12
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003184:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f043 0307 	orr.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031da:	b480      	push	{r7}
 80031dc:	b087      	sub	sp, #28
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	021a      	lsls	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e046      	b.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d009      	beq.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10c      	bne.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800

080032d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e033      	b.n	8003372 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fbfe 	bl	8000b20 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fa91 	bl	8003854 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_USART_Transmit_DMA>:
  * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d153      	bne.n	800343e <HAL_USART_Transmit_DMA+0xc2>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_USART_Transmit_DMA+0x26>
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_USART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e04c      	b.n	8003440 <HAL_USART_Transmit_DMA+0xc4>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_USART_Transmit_DMA+0x38>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e045      	b.n	8003440 <HAL_USART_Transmit_DMA+0xc4>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2212      	movs	r2, #18
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the USART DMA transfer complete callback */
    husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_USART_Transmit_DMA+0xcc>)
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the USART DMA Half transfer complete callback */
    husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_USART_Transmit_DMA+0xd0>)
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    husart->hdmatx->XferErrorCallback = USART_DMAError;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_USART_Transmit_DMA+0xd4>)
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    husart->hdmatx->XferAbortCallback = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	2200      	movs	r2, #0
 80033fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the USART transmit DMA channel */
    tmp = (const uint32_t *)&pTxData;
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(husart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3304      	adds	r3, #4
 8003410:	461a      	mov	r2, r3
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	f7fd fe76 	bl	8001104 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_USART_CLEAR_FLAG(husart, USART_FLAG_TC);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003420:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003438:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_USART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	0800360b 	.word	0x0800360b
 800344c:	08003675 	.word	0x08003675
 8003450:	08003755 	.word	0x08003755

08003454 <HAL_USART_Receive_DMA>:
  * @retval HAL status
  * @note   The USART DMA transmit channel must be configured in order to generate the clock for the slave.
  * @note   When the USART parity is enabled (PCE = 1) the data received contain the parity bit.
  */
HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	f040 8094 	bne.w	8003598 <HAL_USART_Receive_DMA+0x144>
  {
    if ((pRxData == NULL) || (Size == 0))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_USART_Receive_DMA+0x28>
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_USART_Receive_DMA+0x2c>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e08c      	b.n	800359a <HAL_USART_Receive_DMA+0x146>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_USART_Receive_DMA+0x3a>
 800348a:	2302      	movs	r3, #2
 800348c:	e085      	b.n	800359a <HAL_USART_Receive_DMA+0x146>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pRxBuffPtr = pRxData;
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
    husart->RxXferSize = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->pTxBuffPtr = pRxData;
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_RX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2222      	movs	r2, #34	; 0x22
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the USART DMA Rx transfer complete callback */
    husart->hdmarx->XferCpltCallback = USART_DMAReceiveCplt;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_USART_Receive_DMA+0x150>)
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the USART DMA Half transfer complete callback */
    husart->hdmarx->XferHalfCpltCallback = USART_DMARxHalfCplt;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <HAL_USART_Receive_DMA+0x154>)
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the USART DMA Rx transfer error callback */
    husart->hdmarx->XferErrorCallback = USART_DMAError;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	4a36      	ldr	r2, [pc, #216]	; (80035ac <HAL_USART_Receive_DMA+0x158>)
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    husart->hdmarx->XferAbortCallback = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	2200      	movs	r2, #0
 80034da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the USART Tx DMA transfer complete callback as NULL because the communication closing
    is performed in DMA reception complete callback  */
    husart->hdmatx->XferHalfCpltCallback = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	2200      	movs	r2, #0
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
    husart->hdmatx->XferCpltCallback = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	2200      	movs	r2, #0
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    husart->hdmatx->XferErrorCallback = USART_DMAError;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <HAL_USART_Receive_DMA+0x158>)
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA AbortCpltCallback */
    husart->hdmatx->XferAbortCallback = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	2200      	movs	r2, #0
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the USART receive DMA channel */
    tmp = (uint32_t *)&pRxData;
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(husart->hdmarx, (uint32_t)&husart->Instance->DR, *(uint32_t *)tmp, Size);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	f7fd fdf6 	bl	8001104 <HAL_DMA_Start_IT>

    /* Enable the USART transmit DMA channel: the transmit channel is used in order
       to generate in the non-blocking mode the clock to the slave device,
       this mode isn't a simplex receive mode but a full-duplex receive one */
    HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3304      	adds	r3, #4
 8003526:	461a      	mov	r2, r3
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	f7fd fdeb 	bl	8001104 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: mandatory for the second transfer */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (husart->Init.Parity != USART_PARITY_NONE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_USART_Receive_DMA+0x110>
    {
      /* Enable the USART Parity Error Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003562:	60da      	str	r2, [r3, #12]
    }

    /* Enable the USART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003582:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003592:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_USART_Receive_DMA+0x146>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	08003691 	.word	0x08003691
 80035a8:	08003739 	.word	0x08003739
 80035ac:	08003755 	.word	0x08003755

080035b0 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <HAL_USART_TxHalfCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_USART_RxHalfCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <USART_DMATransmitCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d119      	bne.n	800365a <USART_DMATransmitCplt+0x50>
  {
    husart->TxXferCount = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b12      	cmp	r3, #18
 8003636:	d119      	bne.n	800366c <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003646:	615a      	str	r2, [r3, #20]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003656:	60da      	str	r2, [r3, #12]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8003658:	e008      	b.n	800366c <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b12      	cmp	r3, #18
 8003664:	d102      	bne.n	800366c <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff ffa2 	bl	80035b0 <HAL_USART_TxCpltCallback>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <USART_DMATxHalfCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ff9d 	bl	80035c2 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <USART_DMAReceiveCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d134      	bne.n	8003716 <USART_DMAReceiveCplt+0x86>
  {
    husart->RxXferCount = 0x00U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the Transmit/receiver request by clearing the DMAT/DMAR bit
         in the USART CR3 register */
    CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]

    /* The USART state is HAL_USART_STATE_BUSY_RX */
    if (husart->State == HAL_USART_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b22      	cmp	r3, #34	; 0x22
 80036fc:	d103      	bne.n	8003706 <USART_DMAReceiveCplt+0x76>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7fc fe84 	bl	800040c <HAL_USART_RxCpltCallback>
 8003704:	e002      	b.n	800370c <USART_DMAReceiveCplt+0x7c>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ff6d 	bl	80035e6 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
    husart->State = HAL_USART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8003714:	e00c      	b.n	8003730 <USART_DMAReceiveCplt+0xa0>
    if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b22      	cmp	r3, #34	; 0x22
 8003720:	d103      	bne.n	800372a <USART_DMAReceiveCplt+0x9a>
      HAL_USART_RxCpltCallback(husart);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7fc fe72 	bl	800040c <HAL_USART_RxCpltCallback>
}
 8003728:	e002      	b.n	8003730 <USART_DMAReceiveCplt+0xa0>
      HAL_USART_TxRxCpltCallback(husart);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff ff5b 	bl	80035e6 <HAL_USART_TxRxCpltCallback>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <USART_DMARxHalfCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Rx Half Complete Callback */
  husart->RxHalfCpltCallback(husart);
#else
  /* Call legacy weak Rx Half Complete Callback */
  HAL_USART_RxHalfCpltCallback(husart);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ff44 	bl	80035d4 <HAL_USART_RxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <USART_DMAError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	60bb      	str	r3, [r7, #8]
  husart->RxXferCount = 0x00U;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Stop USART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b12      	cmp	r3, #18
 8003792:	d105      	bne.n	80037a0 <USART_DMAError+0x4c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <USART_DMAError+0x4c>
  {
    USART_EndTxTransfer(husart);
 800379a:	68b8      	ldr	r0, [r7, #8]
 800379c:	f000 f828 	bl	80037f0 <USART_EndTxTransfer>
  }

  /* Stop USART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	d105      	bne.n	80037ce <USART_DMAError+0x7a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <USART_DMAError+0x7a>
  {
    USART_EndRxTransfer(husart);
 80037c8:	68b8      	ldr	r0, [r7, #8]
 80037ca:	f000 f826 	bl	800381a <USART_EndRxTransfer>
  }

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0210 	orr.w	r2, r3, #16
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f7ff ff08 	bl	80035f8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <USART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003806:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003830:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 020c 	bic.w	r2, r2, #12
 800386e:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800387e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003888:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800389e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038b6:	f023 030c 	bic.w	r3, r3, #12
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038e8:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a53      	ldr	r2, [pc, #332]	; (8003a3c <USART_SetConfig+0x1e8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d14f      	bne.n	8003994 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7fe fb18 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 80038f8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <USART_SetConfig+0x1ec>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	0119      	lsls	r1, r3, #4
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003930:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <USART_SetConfig+0x1ec>)
 8003932:	fba3 0302 	umull	r0, r3, r3, r2
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	2064      	movs	r0, #100	; 0x64
 800393a:	fb00 f303 	mul.w	r3, r0, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	3332      	adds	r3, #50	; 0x32
 8003944:	4a3e      	ldr	r2, [pc, #248]	; (8003a40 <USART_SetConfig+0x1ec>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003952:	4419      	add	r1, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	441a      	add	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	fbb2 f2f3 	udiv	r2, r2, r3
 800396a:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <USART_SetConfig+0x1ec>)
 800396c:	fba3 0302 	umull	r0, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	2064      	movs	r0, #100	; 0x64
 8003974:	fb00 f303 	mul.w	r3, r0, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	3332      	adds	r3, #50	; 0x32
 800397e:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <USART_SetConfig+0x1ec>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	440a      	add	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003992:	e04e      	b.n	8003a32 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7fe fab4 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003998:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <USART_SetConfig+0x1ec>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	0119      	lsls	r1, r3, #4
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <USART_SetConfig+0x1ec>)
 80039d2:	fba3 0302 	umull	r0, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2064      	movs	r0, #100	; 0x64
 80039da:	fb00 f303 	mul.w	r3, r0, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <USART_SetConfig+0x1ec>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80039f2:	4419      	add	r1, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <USART_SetConfig+0x1ec>)
 8003a0c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	2064      	movs	r0, #100	; 0x64
 8003a14:	fb00 f303 	mul.w	r3, r0, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	3332      	adds	r3, #50	; 0x32
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <USART_SetConfig+0x1ec>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	440a      	add	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	51eb851f 	.word	0x51eb851f

08003a44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a56:	2b84      	cmp	r3, #132	; 0x84
 8003a58:	d005      	beq.n	8003a66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	3303      	adds	r3, #3
 8003a64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a76:	f000 fa9f 	bl	8003fb8 <vTaskStartScheduler>
  
  return osOK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <osThreadCreate+0x54>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01c      	beq.n	8003ad4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685c      	ldr	r4, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691e      	ldr	r6, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ffc9 	bl	8003a44 <makeFreeRtosPriority>
 8003ab2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003abc:	9202      	str	r2, [sp, #8]
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	9100      	str	r1, [sp, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	4632      	mov	r2, r6
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f000 f8d4 	bl	8003c76 <xTaskCreateStatic>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	e01c      	b.n	8003b0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685c      	ldr	r4, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ffab 	bl	8003a44 <makeFreeRtosPriority>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	9200      	str	r2, [sp, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4632      	mov	r2, r6
 8003afc:	4629      	mov	r1, r5
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 f915 	bl	8003d2e <xTaskCreate>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d001      	beq.n	8003b0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 0208 	add.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f103 0208 	add.w	r2, r3, #8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f103 0208 	add.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d103      	bne.n	8003bd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e00c      	b.n	8003bee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e002      	b.n	8003be2 <vListInsert+0x2e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d2f6      	bcs.n	8003bdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6892      	ldr	r2, [r2, #8]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d103      	bne.n	8003c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1e5a      	subs	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b08e      	sub	sp, #56	; 0x38
 8003c7a:	af04      	add	r7, sp, #16
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <xTaskCreateStatic+0x46>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	61fb      	str	r3, [r7, #28]
}
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cbc:	23a0      	movs	r3, #160	; 0xa0
 8003cbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cc4:	d00a      	beq.n	8003cdc <xTaskCreateStatic+0x66>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	61bb      	str	r3, [r7, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01e      	beq.n	8003d20 <xTaskCreateStatic+0xaa>
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9303      	str	r3, [sp, #12]
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9302      	str	r3, [sp, #8]
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f850 	bl	8003db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1a:	f000 f8e3 	bl	8003ee4 <prvAddNewTaskToReadyList>
 8003d1e:	e001      	b.n	8003d24 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d24:	697b      	ldr	r3, [r7, #20]
	}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3728      	adds	r7, #40	; 0x28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08c      	sub	sp, #48	; 0x30
 8003d32:	af04      	add	r7, sp, #16
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 ff82 	bl	8004c4c <pvPortMalloc>
 8003d48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00e      	beq.n	8003d6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d50:	20a0      	movs	r0, #160	; 0xa0
 8003d52:	f000 ff7b 	bl	8004c4c <pvPortMalloc>
 8003d56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
 8003d64:	e005      	b.n	8003d72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d66:	6978      	ldr	r0, [r7, #20]
 8003d68:	f001 f834 	bl	8004dd4 <vPortFree>
 8003d6c:	e001      	b.n	8003d72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	2300      	movs	r3, #0
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	9302      	str	r3, [sp, #8]
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f80e 	bl	8003db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d9c:	69f8      	ldr	r0, [r7, #28]
 8003d9e:	f000 f8a1 	bl	8003ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e002      	b.n	8003dae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dae:	69bb      	ldr	r3, [r7, #24]
	}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	617b      	str	r3, [r7, #20]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e012      	b.n	8003e2c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	7819      	ldrb	r1, [r3, #0]
 8003e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	3334      	adds	r3, #52	; 0x34
 8003e16:	460a      	mov	r2, r1
 8003e18:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d9e9      	bls.n	8003e06 <prvInitialiseNewTask+0x4e>
 8003e32:	e000      	b.n	8003e36 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e34:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d901      	bls.n	8003e48 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e44:	2306      	movs	r3, #6
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2200      	movs	r2, #0
 8003e58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe79 	bl	8003b56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fe74 	bl	8003b56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	f1c3 0207 	rsb	r2, r3, #7
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	334c      	adds	r3, #76	; 0x4c
 8003e98:	224c      	movs	r2, #76	; 0x4c
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 f8ad 	bl	8004ffc <memset>
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <prvInitialiseNewTask+0x120>)
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <prvInitialiseNewTask+0x124>)
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <prvInitialiseNewTask+0x128>)
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	69b8      	ldr	r0, [r7, #24]
 8003eba:	f000 fcd5 	bl	8004868 <pxPortInitialiseStack>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ece:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed0:	bf00      	nop
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20001328 	.word	0x20001328
 8003edc:	20001390 	.word	0x20001390
 8003ee0:	200013f8 	.word	0x200013f8

08003ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003eec:	f000 fdae 	bl	8004a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <prvAddNewTaskToReadyList+0xb8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <prvAddNewTaskToReadyList+0xb8>)
 8003ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f02:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <prvAddNewTaskToReadyList+0xb8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d110      	bne.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f10:	f000 fa9e 	bl	8004450 <prvInitialiseTaskLists>
 8003f14:	e00d      	b.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <prvAddNewTaskToReadyList+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d802      	bhi.n	8003f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <prvAddNewTaskToReadyList+0xc4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <prvAddNewTaskToReadyList+0xc4>)
 8003f3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	2201      	movs	r2, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <prvAddNewTaskToReadyList+0xc8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <prvAddNewTaskToReadyList+0xc8>)
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <prvAddNewTaskToReadyList+0xcc>)
 8003f5c:	441a      	add	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7ff fe02 	bl	8003b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f6a:	f000 fd9f 	bl	8004aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <prvAddNewTaskToReadyList+0xc0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00e      	beq.n	8003f94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <prvAddNewTaskToReadyList+0xbc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d207      	bcs.n	8003f94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <prvAddNewTaskToReadyList+0xd0>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200006dc 	.word	0x200006dc
 8003fa0:	200005dc 	.word	0x200005dc
 8003fa4:	200006e8 	.word	0x200006e8
 8003fa8:	200006f8 	.word	0x200006f8
 8003fac:	200006e4 	.word	0x200006e4
 8003fb0:	200005e0 	.word	0x200005e0
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fc6:	463a      	mov	r2, r7
 8003fc8:	1d39      	adds	r1, r7, #4
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc f8be 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	9202      	str	r2, [sp, #8]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	4921      	ldr	r1, [pc, #132]	; (800406c <vTaskStartScheduler+0xb4>)
 8003fe8:	4821      	ldr	r0, [pc, #132]	; (8004070 <vTaskStartScheduler+0xb8>)
 8003fea:	f7ff fe44 	bl	8003c76 <xTaskCreateStatic>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4a20      	ldr	r2, [pc, #128]	; (8004074 <vTaskStartScheduler+0xbc>)
 8003ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <vTaskStartScheduler+0xbc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e001      	b.n	8004006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d11b      	bne.n	8004044 <vTaskStartScheduler+0x8c>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	613b      	str	r3, [r7, #16]
}
 800401e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004020:	4b15      	ldr	r3, [pc, #84]	; (8004078 <vTaskStartScheduler+0xc0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	334c      	adds	r3, #76	; 0x4c
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <vTaskStartScheduler+0xc4>)
 8004028:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <vTaskStartScheduler+0xc8>)
 800402c:	f04f 32ff 	mov.w	r2, #4294967295
 8004030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <vTaskStartScheduler+0xcc>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <vTaskStartScheduler+0xd0>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800403e:	f000 fc93 	bl	8004968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004042:	e00e      	b.n	8004062 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d10a      	bne.n	8004062 <vTaskStartScheduler+0xaa>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60fb      	str	r3, [r7, #12]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <vTaskStartScheduler+0xa8>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	0800523c 	.word	0x0800523c
 8004070:	08004421 	.word	0x08004421
 8004074:	20000700 	.word	0x20000700
 8004078:	200005dc 	.word	0x200005dc
 800407c:	2000005c 	.word	0x2000005c
 8004080:	200006fc 	.word	0x200006fc
 8004084:	200006e8 	.word	0x200006e8
 8004088:	200006e0 	.word	0x200006e0

0800408c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <vTaskSuspendAll+0x18>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <vTaskSuspendAll+0x18>)
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000704 	.word	0x20000704

080040a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <xTaskResumeAll+0x114>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	603b      	str	r3, [r7, #0]
}
 80040d0:	bf00      	nop
 80040d2:	e7fe      	b.n	80040d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040d4:	f000 fcba 	bl	8004a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040d8:	4b38      	ldr	r3, [pc, #224]	; (80041bc <xTaskResumeAll+0x114>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	4a37      	ldr	r2, [pc, #220]	; (80041bc <xTaskResumeAll+0x114>)
 80040e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <xTaskResumeAll+0x114>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d161      	bne.n	80041ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ea:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <xTaskResumeAll+0x118>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d05d      	beq.n	80041ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f2:	e02e      	b.n	8004152 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040f4:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <xTaskResumeAll+0x11c>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3318      	adds	r3, #24
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fd8f 	bl	8003c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fd8a 	bl	8003c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <xTaskResumeAll+0x120>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	4a2a      	ldr	r2, [pc, #168]	; (80041c8 <xTaskResumeAll+0x120>)
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a27      	ldr	r2, [pc, #156]	; (80041cc <xTaskResumeAll+0x124>)
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7ff fd18 	bl	8003b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <xTaskResumeAll+0x128>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <xTaskResumeAll+0x12c>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004152:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <xTaskResumeAll+0x11c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cc      	bne.n	80040f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004160:	f000 fa18 	bl	8004594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <xTaskResumeAll+0x130>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004170:	f000 f836 	bl	80041e0 <xTaskIncrementTick>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800417a:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <xTaskResumeAll+0x12c>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f1      	bne.n	8004170 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <xTaskResumeAll+0x130>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <xTaskResumeAll+0x12c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800419a:	2301      	movs	r3, #1
 800419c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <xTaskResumeAll+0x134>)
 80041a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ae:	f000 fc7d 	bl	8004aac <vPortExitCritical>

	return xAlreadyYielded;
 80041b2:	68bb      	ldr	r3, [r7, #8]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000704 	.word	0x20000704
 80041c0:	200006dc 	.word	0x200006dc
 80041c4:	2000069c 	.word	0x2000069c
 80041c8:	200006e4 	.word	0x200006e4
 80041cc:	200005e0 	.word	0x200005e0
 80041d0:	200005dc 	.word	0x200005dc
 80041d4:	200006f0 	.word	0x200006f0
 80041d8:	200006ec 	.word	0x200006ec
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ea:	4b51      	ldr	r3, [pc, #324]	; (8004330 <xTaskIncrementTick+0x150>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 808d 	bne.w	800430e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041f4:	4b4f      	ldr	r3, [pc, #316]	; (8004334 <xTaskIncrementTick+0x154>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041fc:	4a4d      	ldr	r2, [pc, #308]	; (8004334 <xTaskIncrementTick+0x154>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d120      	bne.n	800424a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <xTaskIncrementTick+0x158>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <xTaskIncrementTick+0x48>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	603b      	str	r3, [r7, #0]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xTaskIncrementTick+0x46>
 8004228:	4b43      	ldr	r3, [pc, #268]	; (8004338 <xTaskIncrementTick+0x158>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4b43      	ldr	r3, [pc, #268]	; (800433c <xTaskIncrementTick+0x15c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a41      	ldr	r2, [pc, #260]	; (8004338 <xTaskIncrementTick+0x158>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4a41      	ldr	r2, [pc, #260]	; (800433c <xTaskIncrementTick+0x15c>)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b40      	ldr	r3, [pc, #256]	; (8004340 <xTaskIncrementTick+0x160>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a3f      	ldr	r2, [pc, #252]	; (8004340 <xTaskIncrementTick+0x160>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	f000 f9a5 	bl	8004594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800424a:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <xTaskIncrementTick+0x164>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	429a      	cmp	r2, r3
 8004252:	d34d      	bcc.n	80042f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <xTaskIncrementTick+0x158>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xTaskIncrementTick+0x82>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xTaskIncrementTick+0x84>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004268:	4b36      	ldr	r3, [pc, #216]	; (8004344 <xTaskIncrementTick+0x164>)
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	601a      	str	r2, [r3, #0]
					break;
 8004270:	e03e      	b.n	80042f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004272:	4b31      	ldr	r3, [pc, #196]	; (8004338 <xTaskIncrementTick+0x158>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d203      	bcs.n	8004292 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800428a:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <xTaskIncrementTick+0x164>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6013      	str	r3, [r2, #0]
						break;
 8004290:	e02e      	b.n	80042f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3304      	adds	r3, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fcc4 	bl	8003c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fcbb 	bl	8003c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	2201      	movs	r2, #1
 80042b4:	409a      	lsls	r2, r3
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <xTaskIncrementTick+0x168>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <xTaskIncrementTick+0x168>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <xTaskIncrementTick+0x16c>)
 80042ce:	441a      	add	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7ff fc49 	bl	8003b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <xTaskIncrementTick+0x170>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b4      	bcc.n	8004254 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ee:	e7b1      	b.n	8004254 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <xTaskIncrementTick+0x170>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4915      	ldr	r1, [pc, #84]	; (800434c <xTaskIncrementTick+0x16c>)
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d907      	bls.n	8004318 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e004      	b.n	8004318 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <xTaskIncrementTick+0x174>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a0f      	ldr	r2, [pc, #60]	; (8004354 <xTaskIncrementTick+0x174>)
 8004316:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <xTaskIncrementTick+0x178>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000704 	.word	0x20000704
 8004334:	200006e0 	.word	0x200006e0
 8004338:	20000694 	.word	0x20000694
 800433c:	20000698 	.word	0x20000698
 8004340:	200006f4 	.word	0x200006f4
 8004344:	200006fc 	.word	0x200006fc
 8004348:	200006e4 	.word	0x200006e4
 800434c:	200005e0 	.word	0x200005e0
 8004350:	200005dc 	.word	0x200005dc
 8004354:	200006ec 	.word	0x200006ec
 8004358:	200006f0 	.word	0x200006f0

0800435c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <vTaskSwitchContext+0xac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <vTaskSwitchContext+0xb0>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004370:	e044      	b.n	80043fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <vTaskSwitchContext+0xb0>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004378:	4b25      	ldr	r3, [pc, #148]	; (8004410 <vTaskSwitchContext+0xb4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	f1c3 031f 	rsb	r3, r3, #31
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	4921      	ldr	r1, [pc, #132]	; (8004414 <vTaskSwitchContext+0xb8>)
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <vTaskSwitchContext+0x5a>
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4a14      	ldr	r2, [pc, #80]	; (8004414 <vTaskSwitchContext+0xb8>)
 80043c4:	4413      	add	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3308      	adds	r3, #8
 80043da:	429a      	cmp	r2, r3
 80043dc:	d104      	bne.n	80043e8 <vTaskSwitchContext+0x8c>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <vTaskSwitchContext+0xbc>)
 80043f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <vTaskSwitchContext+0xbc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	334c      	adds	r3, #76	; 0x4c
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <vTaskSwitchContext+0xc0>)
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000704 	.word	0x20000704
 800440c:	200006f0 	.word	0x200006f0
 8004410:	200006e4 	.word	0x200006e4
 8004414:	200005e0 	.word	0x200005e0
 8004418:	200005dc 	.word	0x200005dc
 800441c:	2000005c 	.word	0x2000005c

08004420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004428:	f000 f852 	bl	80044d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <prvIdleTask+0x28>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d9f9      	bls.n	8004428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <prvIdleTask+0x2c>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004444:	e7f0      	b.n	8004428 <prvIdleTask+0x8>
 8004446:	bf00      	nop
 8004448:	200005e0 	.word	0x200005e0
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	e00c      	b.n	8004476 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <prvInitialiseTaskLists+0x60>)
 8004468:	4413      	add	r3, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fb54 	bl	8003b18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3301      	adds	r3, #1
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d9ef      	bls.n	800445c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800447c:	480d      	ldr	r0, [pc, #52]	; (80044b4 <prvInitialiseTaskLists+0x64>)
 800447e:	f7ff fb4b 	bl	8003b18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004482:	480d      	ldr	r0, [pc, #52]	; (80044b8 <prvInitialiseTaskLists+0x68>)
 8004484:	f7ff fb48 	bl	8003b18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004488:	480c      	ldr	r0, [pc, #48]	; (80044bc <prvInitialiseTaskLists+0x6c>)
 800448a:	f7ff fb45 	bl	8003b18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800448e:	480c      	ldr	r0, [pc, #48]	; (80044c0 <prvInitialiseTaskLists+0x70>)
 8004490:	f7ff fb42 	bl	8003b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004494:	480b      	ldr	r0, [pc, #44]	; (80044c4 <prvInitialiseTaskLists+0x74>)
 8004496:	f7ff fb3f 	bl	8003b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvInitialiseTaskLists+0x78>)
 800449c:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <prvInitialiseTaskLists+0x64>)
 800449e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <prvInitialiseTaskLists+0x7c>)
 80044a2:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <prvInitialiseTaskLists+0x68>)
 80044a4:	601a      	str	r2, [r3, #0]
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200005e0 	.word	0x200005e0
 80044b4:	2000066c 	.word	0x2000066c
 80044b8:	20000680 	.word	0x20000680
 80044bc:	2000069c 	.word	0x2000069c
 80044c0:	200006b0 	.word	0x200006b0
 80044c4:	200006c8 	.word	0x200006c8
 80044c8:	20000694 	.word	0x20000694
 80044cc:	20000698 	.word	0x20000698

080044d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d6:	e019      	b.n	800450c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044d8:	f000 fab8 	bl	8004a4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <prvCheckTasksWaitingTermination+0x50>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fb9b 	bl	8003c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <prvCheckTasksWaitingTermination+0x54>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <prvCheckTasksWaitingTermination+0x54>)
 80044f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <prvCheckTasksWaitingTermination+0x58>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <prvCheckTasksWaitingTermination+0x58>)
 8004500:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004502:	f000 fad3 	bl	8004aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f810 	bl	800452c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <prvCheckTasksWaitingTermination+0x58>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e1      	bne.n	80044d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200006b0 	.word	0x200006b0
 8004524:	200006dc 	.word	0x200006dc
 8004528:	200006c4 	.word	0x200006c4

0800452c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	334c      	adds	r3, #76	; 0x4c
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fd67 	bl	800500c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004544:	2b00      	cmp	r3, #0
 8004546:	d108      	bne.n	800455a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fc41 	bl	8004dd4 <vPortFree>
				vPortFree( pxTCB );
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fc3e 	bl	8004dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004558:	e018      	b.n	800458c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004560:	2b01      	cmp	r3, #1
 8004562:	d103      	bne.n	800456c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fc35 	bl	8004dd4 <vPortFree>
	}
 800456a:	e00f      	b.n	800458c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004572:	2b02      	cmp	r3, #2
 8004574:	d00a      	beq.n	800458c <prvDeleteTCB+0x60>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60fb      	str	r3, [r7, #12]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <prvDeleteTCB+0x5e>
	}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800459a:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <prvResetNextTaskUnblockTime+0x40>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <prvResetNextTaskUnblockTime+0x14>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <prvResetNextTaskUnblockTime+0x16>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <prvResetNextTaskUnblockTime+0x44>)
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045b6:	e008      	b.n	80045ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <prvResetNextTaskUnblockTime+0x40>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <prvResetNextTaskUnblockTime+0x44>)
 80045c8:	6013      	str	r3, [r2, #0]
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	20000694 	.word	0x20000694
 80045d8:	200006fc 	.word	0x200006fc

080045dc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80045e6:	f000 fa31 	bl	8004a4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <ulTaskNotifyTake+0x90>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d113      	bne.n	800461e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <ulTaskNotifyTake+0x90>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004606:	2101      	movs	r1, #1
 8004608:	6838      	ldr	r0, [r7, #0]
 800460a:	f000 f8c7 	bl	800479c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <ulTaskNotifyTake+0x94>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800461e:	f000 fa45 	bl	8004aac <vPortExitCritical>

		taskENTER_CRITICAL();
 8004622:	f000 fa13 	bl	8004a4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <ulTaskNotifyTake+0x90>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800462e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00e      	beq.n	8004654 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <ulTaskNotifyTake+0x90>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004646:	e005      	b.n	8004654 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <ulTaskNotifyTake+0x90>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	3a01      	subs	r2, #1
 8004650:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <ulTaskNotifyTake+0x90>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800465e:	f000 fa25 	bl	8004aac <vPortExitCritical>

		return ulReturn;
 8004662:	68fb      	ldr	r3, [r7, #12]
	}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200005dc 	.word	0x200005dc
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61bb      	str	r3, [r7, #24]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800469a:	f000 fa99 	bl	8004bd0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046a2:	f3ef 8211 	mrs	r2, BASEPRI
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	617a      	str	r2, [r7, #20]
 80046b8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046ba:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046bc:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80046c4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d146      	bne.n	8004770 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60fb      	str	r3, [r7, #12]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <vTaskNotifyGiveFromISR+0x110>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11c      	bne.n	8004742 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fa89 	bl	8003c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	2201      	movs	r2, #1
 8004718:	409a      	lsls	r2, r3
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <vTaskNotifyGiveFromISR+0x114>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <vTaskNotifyGiveFromISR+0x114>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4a16      	ldr	r2, [pc, #88]	; (800478c <vTaskNotifyGiveFromISR+0x118>)
 8004732:	441a      	add	r2, r3
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7ff fa17 	bl	8003b6e <vListInsertEnd>
 8004740:	e005      	b.n	800474e <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	3318      	adds	r3, #24
 8004746:	4619      	mov	r1, r3
 8004748:	4811      	ldr	r0, [pc, #68]	; (8004790 <vTaskNotifyGiveFromISR+0x11c>)
 800474a:	f7ff fa10 	bl	8003b6e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <vTaskNotifyGiveFromISR+0x120>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d909      	bls.n	8004770 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e002      	b.n	8004770 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <vTaskNotifyGiveFromISR+0x124>)
 800476c:	2201      	movs	r2, #1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800477a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800477c:	bf00      	nop
 800477e:	3728      	adds	r7, #40	; 0x28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000704 	.word	0x20000704
 8004788:	200006e4 	.word	0x200006e4
 800478c:	200005e0 	.word	0x200005e0
 8004790:	2000069c 	.word	0x2000069c
 8004794:	200005dc 	.word	0x200005dc
 8004798:	200006f0 	.word	0x200006f0

0800479c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047a6:	4b29      	ldr	r3, [pc, #164]	; (800484c <prvAddCurrentTaskToDelayedList+0xb0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ac:	4b28      	ldr	r3, [pc, #160]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fa36 	bl	8003c24 <uxListRemove>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	2201      	movs	r2, #1
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	4b21      	ldr	r3, [pc, #132]	; (8004854 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4013      	ands	r3, r2
 80047d2:	4a20      	ldr	r2, [pc, #128]	; (8004854 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d10a      	bne.n	80047f4 <prvAddCurrentTaskToDelayedList+0x58>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	481a      	ldr	r0, [pc, #104]	; (8004858 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047ee:	f7ff f9be 	bl	8003b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047f2:	e026      	b.n	8004842 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d209      	bcs.n	8004820 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <prvAddCurrentTaskToDelayedList+0xc0>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7ff f9cb 	bl	8003bb4 <vListInsert>
}
 800481e:	e010      	b.n	8004842 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7ff f9c1 	bl	8003bb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d202      	bcs.n	8004842 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800483c:	4a09      	ldr	r2, [pc, #36]	; (8004864 <prvAddCurrentTaskToDelayedList+0xc8>)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6013      	str	r3, [r2, #0]
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200006e0 	.word	0x200006e0
 8004850:	200005dc 	.word	0x200005dc
 8004854:	200006e4 	.word	0x200006e4
 8004858:	200006c8 	.word	0x200006c8
 800485c:	20000698 	.word	0x20000698
 8004860:	20000694 	.word	0x20000694
 8004864:	200006fc 	.word	0x200006fc

08004868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b04      	subs	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3b04      	subs	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b04      	subs	r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <pxPortInitialiseStack+0x54>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b14      	subs	r3, #20
 80048a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b20      	subs	r3, #32
 80048ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	080048c1 	.word	0x080048c1

080048c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <prvTaskExitError+0x54>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d00a      	beq.n	80048ea <prvTaskExitError+0x2a>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <prvTaskExitError+0x28>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	60bb      	str	r3, [r7, #8]
}
 80048fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048fe:	bf00      	nop
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0fc      	beq.n	8004900 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c
	...

08004920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <pxCurrentTCBConst2>)
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	6808      	ldr	r0, [r1, #0]
 8004926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800492a:	f380 8809 	msr	PSP, r0
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8811 	msr	BASEPRI, r0
 800493a:	f04e 0e0d 	orr.w	lr, lr, #13
 800493e:	4770      	bx	lr

08004940 <pxCurrentTCBConst2>:
 8004940:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop

08004948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004948:	4806      	ldr	r0, [pc, #24]	; (8004964 <prvPortStartFirstTask+0x1c>)
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	6800      	ldr	r0, [r0, #0]
 800494e:	f380 8808 	msr	MSP, r0
 8004952:	b662      	cpsie	i
 8004954:	b661      	cpsie	f
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	df00      	svc	0
 8004960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004962:	bf00      	nop
 8004964:	e000ed08 	.word	0xe000ed08

08004968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800496e:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <xPortStartScheduler+0xd0>)
 8004970:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <xPortStartScheduler+0xd4>)
 8004994:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <xPortStartScheduler+0xd8>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800499c:	e009      	b.n	80049b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d0ef      	beq.n	800499e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1c3 0307 	rsb	r3, r3, #7
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d00a      	beq.n	80049e0 <xPortStartScheduler+0x78>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60bb      	str	r3, [r7, #8]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ea:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <xPortStartScheduler+0xd8>)
 80049f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <xPortStartScheduler+0xdc>)
 8004a10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a16:	f000 f8b9 	bl	8004b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <xPortStartScheduler+0xe0>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a20:	f7ff ff92 	bl	8004948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a24:	f7ff fc9a 	bl	800435c <vTaskSwitchContext>
	prvTaskExitError();
 8004a28:	f7ff ff4a 	bl	80048c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000e400 	.word	0xe000e400
 8004a3c:	20000708 	.word	0x20000708
 8004a40:	2000070c 	.word	0x2000070c
 8004a44:	e000ed20 	.word	0xe000ed20
 8004a48:	2000000c 	.word	0x2000000c

08004a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
}
 8004a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	4a0d      	ldr	r2, [pc, #52]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <vPortEnterCritical+0x58>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10f      	bne.n	8004a98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <vPortEnterCritical+0x5c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	603b      	str	r3, [r7, #0]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <vPortEnterCritical+0x4a>
	}
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <vPortExitCritical+0x4c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <vPortExitCritical+0x24>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <vPortExitCritical+0x4c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <vPortExitCritical+0x4c>)
 8004ad8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <vPortExitCritical+0x4c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <vPortExitCritical+0x42>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f383 8811 	msr	BASEPRI, r3
}
 8004aec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	00000000 	.word	0x00000000

08004b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b00:	f3ef 8009 	mrs	r0, PSP
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <pxCurrentTCBConst>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b10:	6010      	str	r0, [r2, #0]
 8004b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b1a:	f380 8811 	msr	BASEPRI, r0
 8004b1e:	f7ff fc1d 	bl	800435c <vTaskSwitchContext>
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	6808      	ldr	r0, [r1, #0]
 8004b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b36:	f380 8809 	msr	PSP, r0
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	4770      	bx	lr

08004b40 <pxCurrentTCBConst>:
 8004b40:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b62:	f7ff fb3d 	bl	80041e0 <xTaskIncrementTick>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <SysTick_Handler+0x40>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <vPortSetupTimerInterrupt+0x30>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <vPortSetupTimerInterrupt+0x38>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <vPortSetupTimerInterrupt+0x3c>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <vPortSetupTimerInterrupt+0x40>)
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bae:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <vPortSetupTimerInterrupt+0x30>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	e000e010 	.word	0xe000e010
 8004bc0:	e000e018 	.word	0xe000e018
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	10624dd3 	.word	0x10624dd3
 8004bcc:	e000e014 	.word	0xe000e014

08004bd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bd6:	f3ef 8305 	mrs	r3, IPSR
 8004bda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	d914      	bls.n	8004c0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004be2:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <vPortValidateInterruptPriority+0x6c>)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <vPortValidateInterruptPriority+0x70>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	7afa      	ldrb	r2, [r7, #11]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d20a      	bcs.n	8004c0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	607b      	str	r3, [r7, #4]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <vPortValidateInterruptPriority+0x74>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <vPortValidateInterruptPriority+0x78>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d90a      	bls.n	8004c32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	603b      	str	r3, [r7, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vPortValidateInterruptPriority+0x60>
	}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	e000e3f0 	.word	0xe000e3f0
 8004c40:	20000708 	.word	0x20000708
 8004c44:	e000ed0c 	.word	0xe000ed0c
 8004c48:	2000070c 	.word	0x2000070c

08004c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c58:	f7ff fa18 	bl	800408c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c5c:	4b58      	ldr	r3, [pc, #352]	; (8004dc0 <pvPortMalloc+0x174>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c64:	f000 f910 	bl	8004e88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c68:	4b56      	ldr	r3, [pc, #344]	; (8004dc4 <pvPortMalloc+0x178>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 808e 	bne.w	8004d92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01d      	beq.n	8004cb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d014      	beq.n	8004cb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	3308      	adds	r3, #8
 8004c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <pvPortMalloc+0x6c>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	617b      	str	r3, [r7, #20]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d069      	beq.n	8004d92 <pvPortMalloc+0x146>
 8004cbe:	4b42      	ldr	r3, [pc, #264]	; (8004dc8 <pvPortMalloc+0x17c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d864      	bhi.n	8004d92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cc8:	4b40      	ldr	r3, [pc, #256]	; (8004dcc <pvPortMalloc+0x180>)
 8004cca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ccc:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <pvPortMalloc+0x180>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cd2:	e004      	b.n	8004cde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d903      	bls.n	8004cf0 <pvPortMalloc+0xa4>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f1      	bne.n	8004cd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <pvPortMalloc+0x174>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d04b      	beq.n	8004d92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	4413      	add	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	2308      	movs	r3, #8
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d91f      	bls.n	8004d5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <pvPortMalloc+0xf8>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	613b      	str	r3, [r7, #16]
}
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d56:	69b8      	ldr	r0, [r7, #24]
 8004d58:	f000 f8f8 	bl	8004f4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <pvPortMalloc+0x17c>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <pvPortMalloc+0x17c>)
 8004d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <pvPortMalloc+0x17c>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <pvPortMalloc+0x184>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d203      	bcs.n	8004d7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <pvPortMalloc+0x17c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <pvPortMalloc+0x184>)
 8004d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <pvPortMalloc+0x178>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d92:	f7ff f989 	bl	80040a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <pvPortMalloc+0x16a>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <pvPortMalloc+0x168>
	return pvReturn;
 8004db6:	69fb      	ldr	r3, [r7, #28]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20001318 	.word	0x20001318
 8004dc4:	20001324 	.word	0x20001324
 8004dc8:	2000131c 	.word	0x2000131c
 8004dcc:	20001310 	.word	0x20001310
 8004dd0:	20001320 	.word	0x20001320

08004dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d048      	beq.n	8004e78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004de6:	2308      	movs	r3, #8
 8004de8:	425b      	negs	r3, r3
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4413      	add	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <vPortFree+0xac>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <vPortFree+0x44>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	60fb      	str	r3, [r7, #12]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <vPortFree+0x62>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60bb      	str	r3, [r7, #8]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <vPortFree+0xac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d115      	bne.n	8004e78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <vPortFree+0xac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e5c:	f7ff f916 	bl	800408c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <vPortFree+0xb0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4413      	add	r3, r2
 8004e6a:	4a06      	ldr	r2, [pc, #24]	; (8004e84 <vPortFree+0xb0>)
 8004e6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e6e:	6938      	ldr	r0, [r7, #16]
 8004e70:	f000 f86c 	bl	8004f4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e74:	f7ff f918 	bl	80040a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e78:	bf00      	nop
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20001324 	.word	0x20001324
 8004e84:	2000131c 	.word	0x2000131c

08004e88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e94:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <prvHeapInit+0xac>)
 8004e96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3307      	adds	r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <prvHeapInit+0xac>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <prvHeapInit+0xb0>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <prvHeapInit+0xb0>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <prvHeapInit+0xb4>)
 8004ee8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <prvHeapInit+0xb4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <prvHeapInit+0xb4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <prvHeapInit+0xb4>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <prvHeapInit+0xb8>)
 8004f16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <prvHeapInit+0xbc>)
 8004f1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <prvHeapInit+0xc0>)
 8004f22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000710 	.word	0x20000710
 8004f38:	20001310 	.word	0x20001310
 8004f3c:	20001318 	.word	0x20001318
 8004f40:	20001320 	.word	0x20001320
 8004f44:	2000131c 	.word	0x2000131c
 8004f48:	20001324 	.word	0x20001324

08004f4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f54:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e002      	b.n	8004f60 <prvInsertBlockIntoFreeList+0x14>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d8f7      	bhi.n	8004f5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4413      	add	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d108      	bne.n	8004f8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	441a      	add	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	441a      	add	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d118      	bne.n	8004fd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <prvInsertBlockIntoFreeList+0xac>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d00d      	beq.n	8004fca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e008      	b.n	8004fdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <prvInsertBlockIntoFreeList+0xac>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e003      	b.n	8004fdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d002      	beq.n	8004fea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	20001310 	.word	0x20001310
 8004ff8:	20001318 	.word	0x20001318

08004ffc <memset>:
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4402      	add	r2, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <_reclaim_reent>:
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <_reclaim_reent+0xa8>)
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4604      	mov	r4, r0
 8005014:	4283      	cmp	r3, r0
 8005016:	d04b      	beq.n	80050b0 <_reclaim_reent+0xa4>
 8005018:	69c3      	ldr	r3, [r0, #28]
 800501a:	b143      	cbz	r3, 800502e <_reclaim_reent+0x22>
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d144      	bne.n	80050ac <_reclaim_reent+0xa0>
 8005022:	69e3      	ldr	r3, [r4, #28]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	b111      	cbz	r1, 800502e <_reclaim_reent+0x22>
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f86b 	bl	8005104 <_free_r>
 800502e:	6961      	ldr	r1, [r4, #20]
 8005030:	b111      	cbz	r1, 8005038 <_reclaim_reent+0x2c>
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f866 	bl	8005104 <_free_r>
 8005038:	69e1      	ldr	r1, [r4, #28]
 800503a:	b111      	cbz	r1, 8005042 <_reclaim_reent+0x36>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f861 	bl	8005104 <_free_r>
 8005042:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005044:	b111      	cbz	r1, 800504c <_reclaim_reent+0x40>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f85c 	bl	8005104 <_free_r>
 800504c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800504e:	b111      	cbz	r1, 8005056 <_reclaim_reent+0x4a>
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f857 	bl	8005104 <_free_r>
 8005056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005058:	b111      	cbz	r1, 8005060 <_reclaim_reent+0x54>
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f852 	bl	8005104 <_free_r>
 8005060:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005062:	b111      	cbz	r1, 800506a <_reclaim_reent+0x5e>
 8005064:	4620      	mov	r0, r4
 8005066:	f000 f84d 	bl	8005104 <_free_r>
 800506a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800506c:	b111      	cbz	r1, 8005074 <_reclaim_reent+0x68>
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f848 	bl	8005104 <_free_r>
 8005074:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005076:	b111      	cbz	r1, 800507e <_reclaim_reent+0x72>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f843 	bl	8005104 <_free_r>
 800507e:	6a23      	ldr	r3, [r4, #32]
 8005080:	b1b3      	cbz	r3, 80050b0 <_reclaim_reent+0xa4>
 8005082:	4620      	mov	r0, r4
 8005084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005088:	4718      	bx	r3
 800508a:	5949      	ldr	r1, [r1, r5]
 800508c:	b941      	cbnz	r1, 80050a0 <_reclaim_reent+0x94>
 800508e:	3504      	adds	r5, #4
 8005090:	69e3      	ldr	r3, [r4, #28]
 8005092:	2d80      	cmp	r5, #128	; 0x80
 8005094:	68d9      	ldr	r1, [r3, #12]
 8005096:	d1f8      	bne.n	800508a <_reclaim_reent+0x7e>
 8005098:	4620      	mov	r0, r4
 800509a:	f000 f833 	bl	8005104 <_free_r>
 800509e:	e7c0      	b.n	8005022 <_reclaim_reent+0x16>
 80050a0:	680e      	ldr	r6, [r1, #0]
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 f82e 	bl	8005104 <_free_r>
 80050a8:	4631      	mov	r1, r6
 80050aa:	e7ef      	b.n	800508c <_reclaim_reent+0x80>
 80050ac:	2500      	movs	r5, #0
 80050ae:	e7ef      	b.n	8005090 <_reclaim_reent+0x84>
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
 80050b2:	bf00      	nop
 80050b4:	2000005c 	.word	0x2000005c

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	2600      	movs	r6, #0
 80050bc:	4d0c      	ldr	r5, [pc, #48]	; (80050f0 <__libc_init_array+0x38>)
 80050be:	4c0d      	ldr	r4, [pc, #52]	; (80050f4 <__libc_init_array+0x3c>)
 80050c0:	1b64      	subs	r4, r4, r5
 80050c2:	10a4      	asrs	r4, r4, #2
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	f000 f870 	bl	80051ac <_init>
 80050cc:	2600      	movs	r6, #0
 80050ce:	4d0a      	ldr	r5, [pc, #40]	; (80050f8 <__libc_init_array+0x40>)
 80050d0:	4c0a      	ldr	r4, [pc, #40]	; (80050fc <__libc_init_array+0x44>)
 80050d2:	1b64      	subs	r4, r4, r5
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08005270 	.word	0x08005270
 80050f4:	08005270 	.word	0x08005270
 80050f8:	08005270 	.word	0x08005270
 80050fc:	08005274 	.word	0x08005274

08005100 <__retarget_lock_acquire_recursive>:
 8005100:	4770      	bx	lr

08005102 <__retarget_lock_release_recursive>:
 8005102:	4770      	bx	lr

08005104 <_free_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4605      	mov	r5, r0
 8005108:	2900      	cmp	r1, #0
 800510a:	d040      	beq.n	800518e <_free_r+0x8a>
 800510c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005110:	1f0c      	subs	r4, r1, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfb8      	it	lt
 8005116:	18e4      	addlt	r4, r4, r3
 8005118:	f000 f83c 	bl	8005194 <__malloc_lock>
 800511c:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <_free_r+0x8c>)
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	b933      	cbnz	r3, 8005130 <_free_r+0x2c>
 8005122:	6063      	str	r3, [r4, #4]
 8005124:	6014      	str	r4, [r2, #0]
 8005126:	4628      	mov	r0, r5
 8005128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800512c:	f000 b838 	b.w	80051a0 <__malloc_unlock>
 8005130:	42a3      	cmp	r3, r4
 8005132:	d908      	bls.n	8005146 <_free_r+0x42>
 8005134:	6820      	ldr	r0, [r4, #0]
 8005136:	1821      	adds	r1, r4, r0
 8005138:	428b      	cmp	r3, r1
 800513a:	bf01      	itttt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	e7ed      	b.n	8005122 <_free_r+0x1e>
 8005146:	461a      	mov	r2, r3
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	b10b      	cbz	r3, 8005150 <_free_r+0x4c>
 800514c:	42a3      	cmp	r3, r4
 800514e:	d9fa      	bls.n	8005146 <_free_r+0x42>
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	1850      	adds	r0, r2, r1
 8005154:	42a0      	cmp	r0, r4
 8005156:	d10b      	bne.n	8005170 <_free_r+0x6c>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	4401      	add	r1, r0
 800515c:	1850      	adds	r0, r2, r1
 800515e:	4283      	cmp	r3, r0
 8005160:	6011      	str	r1, [r2, #0]
 8005162:	d1e0      	bne.n	8005126 <_free_r+0x22>
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4408      	add	r0, r1
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	e7da      	b.n	8005126 <_free_r+0x22>
 8005170:	d902      	bls.n	8005178 <_free_r+0x74>
 8005172:	230c      	movs	r3, #12
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	e7d6      	b.n	8005126 <_free_r+0x22>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	1821      	adds	r1, r4, r0
 800517c:	428b      	cmp	r3, r1
 800517e:	bf01      	itttt	eq
 8005180:	6819      	ldreq	r1, [r3, #0]
 8005182:	685b      	ldreq	r3, [r3, #4]
 8005184:	1809      	addeq	r1, r1, r0
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	6054      	str	r4, [r2, #4]
 800518c:	e7cb      	b.n	8005126 <_free_r+0x22>
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20001464 	.word	0x20001464

08005194 <__malloc_lock>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__malloc_lock+0x8>)
 8005196:	f7ff bfb3 	b.w	8005100 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20001460 	.word	0x20001460

080051a0 <__malloc_unlock>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__malloc_unlock+0x8>)
 80051a2:	f7ff bfae 	b.w	8005102 <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20001460 	.word	0x20001460

080051ac <_init>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr

080051b8 <_fini>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr
